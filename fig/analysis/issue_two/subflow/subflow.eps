%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: subflow.pdf
%%Creator: Adobe Acrobat 9.1.0
%%For: chenj
%%CreationDate: 13/02/2012, 10:35:55
%%BoundingBox: -220 220 505 725
%%HiResBoundingBox: -220 220 505 725
%%CropBox: -220 220 505 725
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1128 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 8.54"
   pdf:Keywords=""
   xmp:ModifyDate="2012-02-13T01:11:21Z"
   xmp:CreateDate="2012-02-13T01:11:21+01:00"
   xmp:CreatorTool="PDFCreator Version 0.9.3"
   xmpMM:DocumentID="c8503a26-5832-11e1-0000-e52a3b608148"
   xmpMM:InstanceID="c8503a26-5832-11e1-0000-e52a3b608148"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">subflow [</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>ibmuser</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -725 translate
pgsv
[0 1 -1 0 505 0 ]ct
gsave
np
gsave
0 0 mo
0 725 li
505 725 li
505 0 li
cp
clp
[1 0 0 1 0 0 ]ct
104.52 93.3297 mo
127.08 93.3297 li
127.08 91.4097 li
104.52 91.4097 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.750179 .679652 .670191 .901488 cmyk
f
104.52 93.3297 mo
127.08 93.3297 li
127.08 91.4097 li
104.52 91.4097 li
cp
f
103.44 148.65 mo
103.56 92.3696 li
105.48 92.3696 li
105.36 148.65 li
f
103.44 148.65 mo
103.56 92.3696 li
105.48 92.3696 li
105.36 148.65 li
f
125.88 148.65 mo
126 92.3696 li
128.04 92.3696 li
127.92 148.65 li
f
125.88 148.65 mo
126 92.3696 li
128.04 92.3696 li
127.92 148.65 li
f
104.4 149.61 mo
126.96 149.61 li
126.96 147.57 li
104.4 147.57 li
cp
f
104.4 149.61 mo
126.96 149.61 li
126.96 147.57 li
104.4 147.57 li
cp
f
103.92 108.09 mo
108.12 104.97 li
109.2 106.41 li
104.88 109.41 li
cp
109.56 103.89 mo
113.76 100.77 li
114.84 102.21 li
110.64 105.33 li
cp
115.2 99.8096 mo
119.52 96.6896 li
120.48 98.1296 li
116.28 101.25 li
cp
120.84 95.7297 mo
125.16 92.6097 li
126.12 94.0497 li
121.92 97.0497 li
f
103.92 117.45 mo
108.12 114.33 li
109.2 115.77 li
104.88 118.77 li
cp
109.56 113.25 mo
113.76 110.25 li
114.84 111.57 li
110.64 114.69 li
cp
115.2 109.17 mo
119.52 106.05 li
120.48 107.49 li
116.28 110.61 li
cp
120.84 105.09 mo
125.16 101.97 li
126.12 103.41 li
121.92 106.41 li
f
103.92 126.81 mo
108.12 123.69 li
109.2 125.13 li
104.88 128.25 li
cp
109.56 122.61 mo
113.76 119.61 li
114.84 121.05 li
110.64 124.05 li
cp
115.2 118.53 mo
119.52 115.41 li
120.48 116.85 li
116.28 119.97 li
cp
120.84 114.45 mo
125.16 111.33 li
126.12 112.77 li
121.92 115.89 li
f
103.92 136.17 mo
108.12 133.05 li
109.2 134.49 li
104.88 137.61 li
cp
109.56 132.09 mo
113.76 128.97 li
114.84 130.41 li
110.64 133.41 li
cp
115.2 127.89 mo
119.52 124.89 li
120.48 126.21 li
116.28 129.33 li
cp
120.84 123.81 mo
125.16 120.69 li
126.12 122.13 li
121.92 125.25 li
f
103.92 145.53 mo
108.12 142.41 li
109.2 143.85 li
104.88 146.97 li
cp
109.56 141.45 mo
113.76 138.33 li
114.84 139.77 li
110.64 142.89 li
cp
115.2 137.25 mo
119.52 134.25 li
120.48 135.57 li
116.28 138.69 li
cp
120.84 133.17 mo
125.16 130.05 li
126.12 131.49 li
121.92 134.61 li
f
115.08 147.93 mo
119.16 144.57 li
120.24 145.89 li
116.28 149.25 li
cp
120.48 143.49 mo
124.56 140.13 li
125.64 141.45 li
121.56 144.81 li
cp
125.88 138.93 mo
126.36 138.57 li
127.44 139.89 li
126.96 140.37 li
f
103.92 98.6097 mo
108.36 95.8497 li
109.32 97.2897 li
104.88 100.17 li
cp
109.92 94.8896 mo
114.36 92.1296 li
115.32 93.6896 li
110.76 96.4496 li
f
104.4 344.49 mo
126.96 344.61 li
126.96 346.65 li
104.4 346.53 li
f
104.4 344.49 mo
126.96 344.61 li
126.96 346.65 li
104.4 346.53 li
f
104.4 462.57 mo
126.96 462.81 li
126.96 464.85 li
104.4 464.61 li
f
104.4 462.57 mo
126.96 462.81 li
126.96 464.85 li
104.4 464.61 li
f
103.44 514.53 mo
103.56 345.69 li
105.48 345.69 li
105.36 514.53 li
f
103.44 514.53 mo
103.56 345.69 li
105.48 345.69 li
105.36 514.53 li
f
125.88 514.53 mo
126 345.69 li
128.04 345.69 li
127.92 514.53 li
f
125.88 514.53 mo
126 345.69 li
128.04 345.69 li
127.92 514.53 li
f
104.4 513.33 mo
126.96 513.45 li
126.96 515.49 li
104.4 515.37 li
f
104.4 513.33 mo
126.96 513.45 li
126.96 515.49 li
104.4 515.37 li
f
103.68 384.57 mo
106.2 380.01 li
107.76 380.85 li
105.12 385.41 li
cp
107.16 378.45 mo
109.68 373.89 li
111.24 374.85 li
108.6 379.41 li
cp
110.64 372.45 mo
113.16 367.89 li
114.72 368.73 li
112.08 373.29 li
cp
114.12 366.33 mo
116.64 361.77 li
118.2 362.61 li
115.56 367.17 li
cp
117.6 360.21 mo
120.12 355.65 li
121.68 356.61 li
119.04 361.17 li
cp
120.96 354.21 mo
123.6 349.65 li
125.16 350.49 li
122.52 355.05 li
cp
124.44 348.09 mo
126.12 345.21 li
127.68 346.05 li
126 348.93 li
f
103.68 407.01 mo
106.2 402.45 li
107.76 403.41 li
105.12 407.97 li
cp
107.16 401.01 mo
109.68 396.45 li
111.24 397.29 li
108.6 401.85 li
cp
110.64 394.89 mo
113.16 390.33 li
114.72 391.17 li
112.08 395.73 li
cp
114.12 388.77 mo
116.64 384.21 li
118.2 385.17 li
115.56 389.73 li
cp
117.6 382.77 mo
120.12 378.21 li
121.68 379.05 li
119.04 383.61 li
cp
120.96 376.65 mo
123.6 372.09 li
125.16 372.93 li
122.52 377.49 li
cp
124.44 370.65 mo
126.12 367.65 li
127.68 368.61 li
126 371.49 li
f
103.68 429.57 mo
106.2 425.01 li
107.76 425.85 li
105.12 430.41 li
cp
107.16 423.45 mo
109.68 418.89 li
111.24 419.85 li
108.6 424.41 li
cp
110.64 417.45 mo
113.16 412.89 li
114.72 413.73 li
112.08 418.29 li
cp
114.12 411.33 mo
116.64 406.77 li
118.2 407.61 li
115.56 412.17 li
cp
117.6 405.21 mo
120.12 400.65 li
121.68 401.61 li
119.04 406.17 li
cp
120.96 399.21 mo
123.6 394.65 li
125.16 395.49 li
122.52 400.05 li
cp
124.44 393.09 mo
126.12 390.21 li
127.68 391.05 li
126 393.93 li
f
103.68 452.13 mo
106.2 447.57 li
107.76 448.53 li
105.12 453.09 li
cp
107.16 446.13 mo
109.68 441.57 li
111.24 442.41 li
108.6 446.97 li
cp
110.64 440.01 mo
113.16 435.45 li
114.72 436.29 li
112.08 440.85 li
cp
114 433.89 mo
116.64 429.33 li
118.2 430.29 li
115.56 434.85 li
cp
117.48 427.89 mo
120.12 423.33 li
121.68 424.17 li
119.04 428.73 li
cp
120.96 421.77 mo
123.6 417.21 li
125.04 418.05 li
122.52 422.61 li
cp
124.44 415.65 mo
126.12 412.65 li
127.68 413.61 li
126 416.61 li
f
103.68 362.01 mo
106.56 357.69 li
108 358.65 li
105.12 362.97 li
cp
107.52 356.13 mo
110.52 351.81 li
111.96 352.77 li
109.08 357.21 li
cp
111.48 350.37 mo
114.36 346.05 li
115.8 347.01 li
112.92 351.33 li
f
109.32 463.41 mo
111.96 458.97 li
113.52 459.81 li
110.76 464.37 li
cp
112.92 457.41 mo
115.56 452.97 li
117.12 453.81 li
114.36 458.37 li
cp
116.52 451.41 mo
119.16 446.97 li
120.72 447.81 li
117.96 452.37 li
cp
120.12 445.41 mo
122.76 440.85 li
124.32 441.81 li
121.56 446.37 li
cp
123.72 439.41 mo
126.12 435.33 li
127.68 436.17 li
125.16 440.25 li
f
120.48 463.53 mo
122.76 458.73 li
124.32 459.45 li
122.04 464.25 li
cp
123.48 457.17 mo
125.4 452.97 li
126.96 453.69 li
125.04 457.89 li
f
104.52 581.01 mo
127.08 581.13 li
127.08 583.17 li
104.52 583.05 li
f
104.52 581.01 mo
127.08 581.13 li
127.08 583.17 li
104.52 583.05 li
f
103.44 677.489 mo
103.56 582.09 li
105.48 582.09 li
105.36 677.489 li
f
103.44 677.489 mo
103.56 582.09 li
105.48 582.09 li
105.36 677.489 li
f
125.88 677.489 mo
126 582.09 li
128.04 582.09 li
127.92 677.489 li
f
125.88 677.489 mo
126 582.09 li
128.04 582.09 li
127.92 677.489 li
f
104.4 676.409 mo
126.96 676.529 li
126.96 678.449 li
104.4 678.329 li
f
104.4 676.409 mo
126.96 676.529 li
126.96 678.449 li
104.4 678.329 li
f
103.68 609.45 mo
107.04 605.37 li
108.36 606.45 li
105.12 610.53 li
cp
108.12 604.05 mo
111.48 599.97 li
112.8 601.05 li
109.44 605.13 li
cp
112.56 598.53 mo
115.8 594.45 li
117.24 595.53 li
113.88 599.61 li
cp
116.88 593.13 mo
120.24 589.05 li
121.56 590.13 li
118.32 594.21 li
cp
121.32 587.61 mo
124.56 583.53 li
126 584.73 li
122.64 588.81 li
cp
125.76 582.21 mo
126.24 581.61 li
127.56 582.69 li
127.08 583.29 li
f
103.68 625.29 mo
107.04 621.21 li
108.36 622.29 li
105.12 626.37 li
cp
108.12 619.89 mo
111.48 615.81 li
112.8 616.89 li
109.44 620.97 li
cp
112.56 614.37 mo
115.8 610.29 li
117.24 611.49 li
113.88 615.57 li
cp
116.88 608.97 mo
120.24 604.89 li
121.56 605.97 li
118.32 610.05 li
cp
121.32 603.57 mo
124.56 599.49 li
126 600.57 li
122.64 604.65 li
cp
125.76 598.05 mo
126.24 597.45 li
127.56 598.53 li
127.08 599.13 li
f
103.68 641.25 mo
107.04 637.05 li
108.36 638.25 li
105.12 642.33 li
cp
108.12 635.73 mo
111.48 631.65 li
112.8 632.73 li
109.44 636.81 li
cp
112.56 630.33 mo
115.8 626.25 li
117.24 627.33 li
113.88 631.41 li
cp
116.88 624.81 mo
120.24 620.73 li
121.56 621.81 li
118.32 626.01 li
cp
121.32 619.41 mo
124.56 615.33 li
126 616.41 li
122.64 620.49 li
cp
125.76 614.01 mo
126.24 613.29 li
127.56 614.37 li
127.08 615.09 li
f
103.68 657.09 mo
107.04 653.01 li
108.36 654.09 li
105.12 658.17 li
cp
108.12 651.57 mo
111.48 647.49 li
112.8 648.69 li
109.44 652.77 li
cp
112.56 646.17 mo
115.8 642.09 li
117.24 643.17 li
113.88 647.25 li
cp
116.88 640.77 mo
120.24 636.69 li
121.56 637.77 li
118.32 641.85 li
cp
121.32 635.25 mo
124.56 631.17 li
126 632.25 li
122.64 636.33 li
cp
125.76 629.85 mo
126.24 629.25 li
127.56 630.33 li
127.08 630.93 li
f
103.68 672.929 mo
107.04 668.849 li
108.36 669.929 li
105.12 674.009 li
cp
108.12 667.529 mo
111.48 663.449 li
112.8 664.529 li
109.44 668.609 li
cp
112.56 662.009 mo
115.8 658.05 li
117.24 659.129 li
113.88 663.209 li
cp
117 656.61 mo
120.24 652.53 li
121.68 653.61 li
118.32 657.69 li
cp
121.32 651.21 mo
124.68 647.13 li
126 648.21 li
122.76 652.29 li
cp
125.76 645.81 mo
126.24 645.21 li
127.56 646.29 li
127.08 646.89 li
f
114.96 677.009 mo
117.96 672.689 li
119.4 673.769 li
116.4 677.969 li
cp
119.04 671.249 mo
122.04 667.049 li
123.48 668.009 li
120.48 672.329 li
cp
123 665.609 mo
126.12 661.289 li
127.56 662.249 li
124.44 666.569 li
f
103.8 593.37 mo
107.4 589.53 li
108.6 590.73 li
105 594.57 li
cp
108.6 588.33 mo
112.2 584.49 li
113.52 585.69 li
109.92 589.53 li
cp
113.4 583.17 mo
115.08 581.49 li
116.28 582.69 li
114.72 584.49 li
f
104.52 198.21 mo
127.08 198.33 li
127.08 200.37 li
104.52 200.25 li
f
104.52 198.21 mo
127.08 198.33 li
127.08 200.37 li
104.52 200.25 li
f
103.44 289.29 mo
103.56 199.41 li
105.48 199.41 li
105.36 289.29 li
f
103.44 289.29 mo
103.56 199.41 li
105.48 199.41 li
105.36 289.29 li
f
125.88 289.29 mo
126 199.41 li
128.04 199.41 li
127.92 289.29 li
f
125.88 289.29 mo
126 199.41 li
128.04 199.41 li
127.92 289.29 li
f
104.4 288.09 mo
126.96 288.21 li
126.96 290.25 li
104.4 290.13 li
f
104.4 288.09 mo
126.96 288.21 li
126.96 290.25 li
104.4 290.13 li
f
103.8 225.09 mo
107.16 221.01 li
108.48 222.21 li
105.12 226.17 li
cp
108.36 219.69 mo
111.72 215.73 li
113.04 216.93 li
109.68 220.89 li
cp
112.8 214.41 mo
116.28 210.45 li
117.6 211.53 li
114.24 215.61 li
cp
117.36 209.13 mo
120.84 205.17 li
122.16 206.25 li
118.8 210.21 li
cp
121.92 203.85 mo
125.4 199.77 li
126.72 200.97 li
123.24 204.93 li
f
103.8 240.09 mo
107.16 236.01 li
108.48 237.21 li
105.12 241.17 li
cp
108.36 234.69 mo
111.72 230.73 li
113.04 231.93 li
109.68 235.89 li
cp
112.8 229.41 mo
116.28 225.45 li
117.6 226.53 li
114.24 230.61 li
cp
117.36 224.13 mo
120.84 220.17 li
122.16 221.25 li
118.8 225.21 li
cp
121.92 218.85 mo
125.4 214.77 li
126.72 215.97 li
123.24 219.93 li
f
103.8 254.97 mo
107.16 250.89 li
108.48 252.09 li
105.12 256.05 li
cp
108.36 249.57 mo
111.72 245.61 li
113.04 246.81 li
109.68 250.77 li
cp
112.92 244.29 mo
116.28 240.33 li
117.6 241.53 li
114.24 245.49 li
cp
117.48 239.01 mo
120.84 235.05 li
122.16 236.13 li
118.8 240.21 li
cp
122.04 233.73 mo
125.4 229.77 li
126.72 230.85 li
123.36 234.81 li
f
103.8 269.97 mo
107.16 265.89 li
108.48 267.09 li
105.12 271.05 li
cp
108.36 264.57 mo
111.72 260.61 li
113.04 261.81 li
109.68 265.77 li
cp
112.8 259.29 mo
116.28 255.33 li
117.6 256.41 li
114.24 260.49 li
cp
117.36 254.01 mo
120.84 250.05 li
122.16 251.13 li
118.8 255.09 li
cp
121.92 248.61 mo
125.4 244.65 li
126.72 245.85 li
123.24 249.81 li
f
103.8 284.97 mo
107.16 280.89 li
108.48 282.09 li
105.12 286.05 li
cp
108.36 279.57 mo
111.72 275.61 li
113.04 276.81 li
109.68 280.77 li
cp
112.8 274.29 mo
116.28 270.33 li
117.6 271.41 li
114.24 275.49 li
cp
117.36 269.01 mo
120.84 265.05 li
122.16 266.13 li
118.8 270.09 li
cp
121.92 263.61 mo
125.4 259.65 li
126.72 260.85 li
123.24 264.81 li
f
114.96 288.69 mo
118.08 284.49 li
119.52 285.57 li
116.4 289.77 li
cp
119.16 283.17 mo
122.28 278.97 li
123.72 279.93 li
120.6 284.13 li
cp
123.36 277.53 mo
126.24 273.69 li
127.56 274.77 li
124.8 278.61 li
f
103.8 209.97 mo
107.52 206.25 li
108.72 207.57 li
105 211.29 li
cp
108.72 205.05 mo
112.44 201.33 li
113.64 202.53 li
109.92 206.25 li
cp
113.64 200.13 mo
115.08 198.81 li
116.28 200.01 li
114.96 201.33 li
f
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.473 -0.191 1.211 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420af93b7f9000001240000050a6670676df6f64d0c000006300000091a
676c79660000000000004a1c000001d868656164e227153f00000f4c0000
0036686865610dae0b3c00000f8400000024686d74780000000000000fa8
00000d686c6f63610000000000001d10000008c46d6178702801030d0000
25d4000000206e616d6500000000000025f40000001970726570ffeae6e0
000026100000240b67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff00000000000000000000000000010000000000000000079e0000fe93
0000000000000000000000000050006a0073008000800086008d009300bf
00db006200830093009900a000a600a900b000c100c900d7000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe79056d000c03b7000600130000fffaffedfea6
ffedfeb8050e000600130000fffaffedfe93050e00130420000600130000
fffaffedff10ffee050e00130420000600130000fffaffeefe93ff10feb8
0612000a050e0006000d02d2fffafff301fdfffa023f0006000dff36fffa
fff302870006000f0000fffafff1079efeaffea700000000000000000000
000000500051005a005b005c005d006000610062006400680069006a006b
006c006d006e00680069006e00600067006e00660068005f006100630064
00660068006a006b006c006d006e006f0070006f00720074007500760076
007000720073007400750076006f00700071007200730075007700770078
0079007a007b007c007d007b007c007d00770079007a007c0078007a007c
007d0078007d007e007f008000810082007e007f00810082007e007f0080
008100820083008400850086008700880089008300840085008600870088
0089008300840085008600870088008900890086008700880089008a008b
008c008d008e008f008a008b008c008d008e008f008a008b008c008d008e
008f008d008a008b008c008d008e008f0090009000910092009300940095
009600980099009b009c0090009100920093009400950096009700980099
009a009e009f00a60090009100950098009f009000910096009700bc00c6
00b500ae00af00b6006800690063006a006f00700071006f007000710072
0066006c006d00700079007c007f00830086008700880089008a00740075
00760077007a007b007c007d007e008200850086008a0088008900830078
007b00820083008600870088008900760079007a007c007d007e00830085
00880089008a0073007400750077007a007d00880089008a008b008c008d
008e00900094008b008c008d00910092009300940095008c008d00910095
008f009000910092009300940095008b008c008d008e008f009000910092
009300940095008b008c008d008e008f0090009100920093009600970098
0099009c0096009700980099009a009b009c00960099009a009c00960097
00980099009a009b009c009700980099009a009b009c009700980099009a
009b009c0096009d00a000a1009d009e009f00a000a100a2009d009f00a0
00a1009f00a2009d009e009f00a000a100a2009d009e00a000a1009d009e
00a000a2009d00a300a400a500a600a700a300a400a600a700a300a400a5
00a600a700a600a300a700a800a900aa00ab00ac00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae00ad00ae00af00b0
00b100b200b300b400b500b600b700b800ad00ae00ad00ae00af00b000b1
00b200b300b400b500b600b700b800ad00ae00af00b000b100b200b300b4
00b500b600b700b800b300ae00af00b000b200b500b600b700b800b900ba
00bb00bc00be00c000c100c200c200b900ba00bb00bc00bd00be00bf00c0
00c100c200c400ba00bb00be00bf00c000c200c300c400b900ba00bf00c0
00c200c600c700c900ca00cb00cc00cf00c500c700ce00c500c700c800cf
00d000d200d300d7010d00d000d100e900d000fd00d000004047645f5e5d
5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e3d
3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a090807
060504030201002c4523466020b02660b004262348482d2c452346236120
b02661b004262348482d2c45234660b0206120b04660b004262348482d2c
4523462361b0206020b02661b02061b004262348482d2c45234660b04061
20b06660b004262348482d2c4523462361b0406020b02661b04061b00426
2348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b0
8d44235920b0ed51582320b04d44235920b0042651582320b00d44235921
212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a43
2343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370
b10228453ab10200080d2d2c2045b00325456164b050515845441b212159
2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b
20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a
87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52
5845441b2121592d2c01b005251023208af500b0016023edec2d2c01b005
251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160
0110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2c4523456023456023456023
766818b08062202d2cb00426b00426b00425b0042545234520b003266062
636820b0032661658a2344442d2c2045b0005458b040442045b04061441b
2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b014
23421b2121592d2c4b515820b0032545695358441b2121591b2121592d2c
45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d2c
45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d2c
b0164358b00326458a586466b01f601b64b020606620581b21b04059b001
615923586559b02923442310b029e01b2121212121592d2cb0164358b004
254564b020606620581b21b04059b0016123586559b0292344b00425b007
25082058021b0359b0052510b004252046b0042523423cb0072510b00625
2046b00425b0016023423c2058011b0059b0052510b00425b029e0b00725
10b00625b029e0b00425b00725082058021b0359b00425b003254348b006
25b00325b0016043481b2159212121212121212d2cb0164358b004254564
b020606620581b21b04059b0016123581b6559b0292344b00525b0082508
2058021b0359b0042510b005252046b0042523423cb00425b0072508b007
2510b006252046b00425b0016023423c2058011b0059b0042510b00525b0
29e0b02920456544b0072510b00625b029e0b00525b00825082058021b03
59b00525b003254348b00425b0072508b00625b00325b0016043481b2159
212121212121212d2c02b00425202046b004252342b0052508b003254548
212121212d2c02b0032520b0042508b0022543482121212d2c4523204518
20b00050205823652359236820b040505821b04059235865598a60442d2c
4b53234b515a5820458a60441b2121592d2c4b545820458a60441b212159
2d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0
02435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2c
b002435458b0482b1b21212121592d2cb002435458b0492b1b212121592d
2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b00626
49618b3812342d2c014623466023466123201020468a61b8ff80628ab140
408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a
592d2cb012004b014b54422d2cb1020042b123018851b1400188535a58b9
10000020885458b202010243604259b12401885158b920000040885458b2
020202436042b12401885458b2022002436042004b014b5258b202080243
6042591bb940000080885458b202040243604259b94000008063b8010088
5458b202080243604259b94000010063b80200885458b202100243604259
b94000020063b80400885458b202400243604259595959592d2c45186823
4b51582320452064b04050587c59688a6059442d2cb00016b00225b00225
01b001233e00b002233eb10102060cb00a236542b00b234201b001233f00
b002233fb10102060cb006236542b0072342b00116012d2c20b82000628a
6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff545821
cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b00425
4760b0062547b0806361b00225b0005558b00325b00725496359b0082558
001b0159b00425b0062549b009255cb009255a58b0092b59b0072546b080
6361b0032520b0005558631b2159612320b0005558b080631b21b08059b0
592bb006255c586959b00425202010b00048233ab0062658001b0159b005
2658b003252f598a12233221212d2cb00625b00a2587b00625b009254ab0
005358b00625b00a251bb00925b0072559b00225b00225070cb005256323
b00625636020b94000040063535821b00426b00426b00a1bb94000040063
655158b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d
0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558
b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff5458
21cd1bed59b00525b0052507b00825b00b254923b00625b0062587b00a25
10b00b25c15920b00051b800522378b00161b00225b00725b0072507b00a
25b00d254961b08062b00525b005250bb00a252338b00625b0062587b008
25b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b00325
54b8ffa723792121212121212121212121212d2c23b0005458b940000000
1bb900004000598ab0005458b9400000001bb90000400059b05b2b2d2c08
b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab00054
58b9400000001bb90000400059b05b2b2d2cb00426b00426080db00426b0
0426080db05b2b2d2c204569442d0000000100000001051fb1b0afba5f0f
3cf50019080000000000bbeb7ccc00000000c1274845fc31fe7309b6079e
000000090002000000000000000100000600fe0001c40a4efc31fe8c09b6
00010000000000000000000000000000035a040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e000005860096
000000a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec
00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec000100000461
00ad000700ac000700020010002f006500002318ffff0004000100000001
001200020002000000060007000043616c69627269000000b2090320b802
84b40918014a20b80283b40918014a20b80282b40918014a20b80281b409
18014a20b80280b40918014a20b8027fb40918014a20b8027eb40918014a
20b8027db40918014a20b8027cb40918014a20b8027bb40918014a20b802
7ab40918014a20b80279b40918014a20b80278b40918014a20b80277b409
18014a20b80276b40918014a20b80275b40918014a20b80274b40918014a
20b80273b40918014a20b80271b40918014a20b80270b40918014a20b802
6fb40918014a20b8026eb40918014a20b8026db40918014a20b8026cb409
18014a20b8026bb40918014a20b8026ab40918014a20b80269b40918014a
20b80268b40918014a20b80267b40918014a20b80266b40918014a20b802
65b40918014a20b80264b40918014a20b80263b40918014a20b80262b409
18014a20b80261b40918014a20b80260b40918014a20b8025fb40918014a
20b8025eb40918014a20b8025db40918014a20b8025cb40918014a20b802
5bb40918014a20b8025ab40918014a20b80259b40918014a20b80258b409
18014a20b80257b40918014a20b80256b40918014a20b80255b40918014a
20b80254b40918014a20b80253b40918014a20b80252b40918014a20b802
51b40918014a20b80250b40918014a20b8024fb40918014a20b8024eb409
18014a20b8024db40918014a20b8024cb40918014a20b8024bb40918014a
20b8024ab40918014a20b80249b40918014a20b80248b40918014a20b802
47b40918014a20b80246b40918014a20b80245b40918014a20b80244b409
18014a20b80243b40918014a20b80242b40918014a20b80241b40918014a
20b80240b40918014a20b8023fb40918014a20b8023eb40918014a20b802
3db40918014a20b8023cb40918014a20b8023bb40918014a20b8023ab409
18014a20b80239b40918014a20b80238b40918014a20b80237b40918014a
20b80236b40918014a20b80235b40918014a20b80234b40918014a20b802
33b40918014a20b80232b40918014a20b80231b40918014a20b80230b409
18014a20b8022fb40918014a20b8022eb40918014a20b8022db40918014a
20b8022cb40918014a20b8022bb40918014a20b8022ab40918014a20b802
29b40918014a20b80228b40918014a20b80227b40918014a20b80226b409
18014a20b80225b40918014a20b80224b40918014a20b80223b40918014a
20b80222b40918014a20b80221b40918014a20b80220b40918014a20b802
1fb40918014a20b8021eb40918014a20b8021db40918014a20b8021cb409
18014a20b8021bb40918014a20b8021ab40918014a20b80219b40918014a
20b80218b40918014a20b80217b40918014a20b80216b40918014a20b802
15b40918014a20b80214b40918014a20b80213b40918014a20b80212b409
18014a20b80211b40918014a20b80210b40918014a20b8020fb40918014a
20b8020eb40918014a20b8020db40918014a20b8020cb40918014a20b802
0bb40918014a20b8020ab40918014a20b80209b40918014a20b80208b409
18014a20b80207b40918014a20b80206b40918014a20b80205b40918014a
20b80204b40918014a20b80203b40918014a20b80202b40918014a20b802
01b40918014a20b80200b40918014a20b801ffb40918014a20b801feb409
18014a20b801fdb40918014a20b801fcb40918014a20b801fbb40918014a
20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20b801
f7b40918014a20b801f6b40918014a20b801f5b40918014a20b801f4b409
18014a20b801f3b40918014a20b801f2b40918014a20b801f1b40918014a
20b801f0b40918014a20b801efb40918014a20b801eeb40918014a20b801
edb40918014a20b801ecb40918014a20b801ebb40918014a20b801eab409
18014a20b801e9b40918014a20b801e8b40918014a20b801e7b40918014a
20b801e6b40918014a20b801e5b40918014a20b801e4b40918014a20b801
e3b40918014a20b801e2b40918014a20b801e1b40918014a20b801e0b409
18014a20b801dfb40918014a20b801deb40918014a20b801ddb40918014a
20b801dcb40918014a20b801dbb40918014a20b801dab40918014a20b801
d9b40918014a20b801d8b40918014a20b801d7b40918014a20b801d6b409
18014a20b801d5b40918014a20b801d4b40918014a20b801d3b40918014a
20b801d2b40918014a20b801d1b40918014a20b801d0b40918014a20b801
cfb40918014a20b801ceb40918014a20b801cdb40918014a20b801ccb409
18014a20b801cbb40918014a20b801cab40918014a20b801c9b40918014a
20b801c8b40918014a20b801c7b40918014a20b801c6b40918014a20b801
c5b40918014a20b801c4b40918014a20b801c3b40918014a20b801c2b409
18014a20b801c1b40918014a20b801c0b40918014a20b801bfb40918014a
20b801beb40918014a20b801bdb40918014a20b801bcb40918014a20b801
bbb40918014a20b801bab40918014a20b801b9b40918014a20b801b8b409
18014a20b801b7b40918014a20b801b6b40918014a20b801b5b40918014a
20b801b4b40918014a20b801b3b40918014a20b801b2b40918014a20b801
b1b40918014a20b801b0b40918014a20b801afb40918014a20b801aeb409
18014a20b801adb40918014a20b801acb40918014a20b801abb40918014a
20b801aab40918014a20b801a9b40918014a20b801a8b40918014a20b801
a7b40918014a20b801a6b40918014a20b801a5b40918014a20b801a4b409
18014a20b801a3b40918014a20b801a2b40918014a20b801a1b40918014a
20b801a0b40918014a20b8019fb40918014a20b8019eb40918014a20b801
9db40918014a20b8019cb40918014a20b8019bb40918014a20b8019ab409
18014a20b80199b40918014a20b80198b40918014a20b80197b40918014a
20b80196b40918014a20b80195b40918014a20b80194b40918014a20b801
93b40918014a20b80192b40918014a20b80191b40918014a20b80190b409
18014a20b8018fb40918014a20b8018eb40918014a20b8018db40918014a
20b8018cb40918014a20b8018bb40918014a20b8018ab40918014a20b801
89b40918014a20b80188b40918014a20b80187b40918014a20b80186b409
18014a20b80185b40918014a20b80184b40918014a20b80183b40918014a
20b80182b40918014a20b80181b40918014a20b80180b40918014a20b801
7fb40918014a20b8017eb40918014a20b8017db40918014a20b8017cb409
18014a20b8017bb40918014a20b8017ab40918014a20b80179b40918014a
20b80178b40918014a20b80177b40918014a20b80176b40918014a20b801
75b40918014a20b80174b40918014a20b80173b40918014a20b80172b409
18014a20b80171b40918014a20b80170b40918014a20b8016fb40918014a
20b8016eb40918014a20b8016db40918014a20b8016cb40918014a20b801
6bb40918014a20b8016ab40918014a20b80169b40918014a20b80168b409
18014a20b80167b40918014a20b80166b40918014a20b80165b40918014a
20b80164b40918014a20b80163b40918014a20b80162b40918014a20b801
61b40918014a20b80160b40918014a20b8015fb40918014a20b8015eb409
18014a20b8015db40918014a20b8015cb40918014a20b8015bb40918014a
20b8015ab40918014a20b80159b40918014a20b80158b40918014a20b801
57b40918014a20b80156b40918014a20b80155b40918014a20b80154b409
18014a20b80153b40918014a20b80152b40918014a20b80150b40918014a
20b8014fb40918014a20b8014eb40918014a20b8014cb40918014a20b801
4bb40918014a20b8014ab40918014a20b80149b40918014a20b80148b409
18014a20b80147b40918014a20b80146b40918014a20b80145b40918014a
20b80144b40918014a20b80143b30918014ab80284b21e3e1fb80283b21e
151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8027fb21e3e1f
b8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027bb21e3e1fb802
7ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d431fb80276b2
1d431fb80275b21d411fb80274b21d431fb80273b21d431fb80272b21d41
1fb80271b21d421fb80270b21d421fb8026fb21d421fb8026eb21d431fb8
026db21d431fb8026cb21d431fb8026bb21c451fb8026ab21c451fb80269
b21c451fb80268b21c451fb80267b21c451fb80266b21c441fb80265b21c
451fb80264b21c451fb80263b21c451fb80262b21c451fb80261b21c451f
b80260b21c451fb8025fb21c451fb8025eb21c441fb8025db21c451fb802
5cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451fb80258b2
1c451fb80257b21c451fb80256b21c451fb80255b21c451fb80254b21c45
1fb80253b21c451fb80252b21c451fb80251b21c451fb80250b21c451fb8
024fb21c451fb8024eb21c451fb8024db21c451fb8024cb21c451fb8024b
b21c451fb8024ab21b491fb80249b21b491fb80248b21b4a1fb80247b21b
4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb80243b21b4c1f
b80242b21b4b1fb80241b21b491fb80240b21b491fb8023fb21b4a1fb802
3eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b4b1fb8023ab2
1b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1fb80236b21b4c
1fb80235b21b491fb80234b21b491fb80233b21b4a1fb80232b21b4a1fb8
0231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb21b4c1fb8022d
b21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c1fb80229b21b
4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225b21b4a1f
b80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221b21b4b1fb802
20b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b4c1fb8021cb2
1b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1fb80218b21a4f
1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb80214b21a4f1fb8
0213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b21a4e1fb8020f
b21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e1fb8020bb21a
4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb80207b21a4f1f
b80206b219501fb80205b219511fb80204b219511fb80203b219501fb802
02b219511fb80201b219511fb80200b219511fb801ffb219511fb801feb2
19501fb801fdb219511fb801fcb219511fb801fbb219511fb801fab21950
1fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b219511fb8
01f5b218541fb801f4b218531fb801f3b218541fb801f2b218541fb801f1
b218541fb801f0b218531fb801efb218541fb801eeb218541fb801edb218
541fb801ecb218531fb801ebb218531fb801eab218541fb801e9b218541f
b801e8b218541fb801e7b218541fb801e6b218531fb801e5b218541fb801
e4b218531fb801e3b218541fb801e2b218541fb801e1b218541fb801e0b2
18531fb801dfb218531fb801deb218541fb801ddb218541fb801dcb21854
1fb801dbb218541fb801dab218531fb801d9b218541fb801d8b218541fb8
01d7b217571fb801d6b217561fb801d5b217561fb801d4b217571fb801d3
b217571fb801d2b217571fb801d1b217571fb801d0b217561fb801cfb217
561fb801ceb217571fb801cdb217571fb801ccb217571fb801cbb217571f
b801cab217561fb801c9b217561fb801c8b217571fb801c7b217571fb801
c6b217571fb801c5b217571fb801c4b217571fb801c3b217561fb801c2b2
17571fb801c1b217571fb801c0b217571fb801bfb217561fb801beb21756
1fb801bdb217571fb801bcb217571fb801bbb217571fb801bab217571fb8
01b9b217571fb801b8b217561fb801b7b217571fb801b6b217571fb801b5
b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b1fb801b1b216
5b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb801adb2165b1f
b801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9b2163f1fb801
a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b2165b1fb801a4b2
165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b
1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb8019cb2165b1fb8
019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2163e1fb80197
b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e1fb80193b216
3f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8018fb2165b1f
b8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018bb2165b1fb801
8ab2165b1fb80189b2165b1fb80188b2165b1fb80187b2165b1fb80186b2
15611fb80185b215621fb80184b215621fb80183b215661fb80182b21566
1fb80181b215551fb80180b215451fb8017fb215361fb8017eb215361fb8
017db215611fb8017cb215621fb8017bb215621fb8017ab215641fb80179
b215661fb80178b215661fb80177b215661fb80176b215661fb80175b215
661fb80174b215661fb80173b215451fb80172b215621fb80171b215621f
b80170b215631fb8016fb215641fb8016eb215661fb8016db215661fb801
6cb215661fb8016bb215661fb8016ab215661fb80169b215621fb80168b2
15621fb80167b215611fb80166b215641fb80165b215641fb80164b21566
1fb80163b215661fb80162b215661fb80161b215661fb80160b215661fb8
015fb215661fb8015eb215551fb8015db215451fb8015cb215451fb8015b
b215361fb8015ab215611fb80159b215621fb80158b215621fb80157b215
631fb80156b215641fb80155b215661fb80154b215661fb80153b215661f
b80152b215661fb80151b214401fb80150b214551fb8014fb214561fb801
4eb214831fb8014db2142d1fb8014cb214401fb8014bb214401fb8014ab2
14411fb80149b214401fb80148b214401fb80147b214411fb80146b2147e
1fb80145b214871fb80144b2147f1fb80143b214801fb80142b212461fb8
0141b212461fb80140b212461fb8013fb212461fb8013eb212441fb8013d
b212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb80139b211
5b1fb80138b211471fb80137b211581fb80136b2115a1fb80135b2115b1f
b80134b2115b1fb80133b2112c1fb80132b211471fb80131b211551fb801
30b211571fb8012fb211571fb8012eb211581fb8012db211591fb8012cb2
11591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb80128b2115b
1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b211561fb8
0123b211571fb80122b211581fb80121b211591fb80120b2115a1fb8011f
b2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8011bb211
5b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117b2105f1f
b80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b2105f1fb801
12b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1fb8010eb2
105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb8010ab2105f
1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2105d1fb8
0105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f1fb80101
b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f621ffb0f
621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641ff40f621f
f30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f621fec0f
621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671fe50e681f
e40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e681fdd0e
671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311fd60d6b1f
d50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d
6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d691f
c60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40ffc00d311f
bf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c741fb80c
741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741fb10c741f
b00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b
7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b791f
a10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b
7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f930b7e1f
920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503
251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d010b
7d1b7d4b7d7b7dab7ddb7d404d060a7c557a557bab7a557955775578ab77
5576ab755504751475747503f47501ab7501447501307501020075107520
75030c7455725573ab7255007250728072b072043bb072e072020072010a
b8ffc0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a
03251f6938675568ab67556638645565ab645563386255613860555f385d
555eab5d555c385a555bab5a55593858555703251f5638545555ab545553
38515552ab51554f384e554e03251f4d384b554cab4b554a38485549ab48
55473846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142
301b401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f1901
6f197f198f19030f18cf18024018292c460f17cf17df17ef170413401729
2e460016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b3
16313546b8ffc0404d162326460f15010f151f1502451f15010011e011f0
110315bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0e
ff0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040
270c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d304600030120
01010001100120010308b8ffc0b401151f4603bc01000100000500010190
b154532b2b4bb80800524bb008505bb00188b02553b00188b040515ab006
88b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d
8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0
ff5358b20300001d42592b5e7375732b2b745e732b2b5e73742b73742b73
74745e7301755e73742b2b2b2b5e732b5e732b7374755e735e735e73755e
732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b5e73742b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2bb1000243545841ff028400640283006402820064028100640280006402
7f0064027e0064027d0064027c0064027b0064027a006402790064027800
640277006402760064027500640274006402730064027100640270006402
6f0064026e0064026d0064026c0064026b0064026a006402690064026800
640267006402660064026500640264006402630064026200640261006402
600064025f0064025e0064025d0064025c0064025b0064025a0064025900
640258006402570064025600640255006402540064025300640252006402
51006402500064024f0064024e0064024d0064024c0064024b0064024a00
640249006402480064024700640246006402450064024400640243006402
4200640241006402400064023f0064023e0064023d0064023c0064023b00
64023a006402390064023800640237006402360064023500640234006402
330064023200640231006402300064022f0064022e0064022d0064022c00
64022b0064022a0064022900640228006402270064022600640225006402
24006402230064022200640221006402200064021f0064021e0064021d00
64021c0064021b0064021a00640219006402180064021700640216006402
1500640214006402130064021200640211006402100064020f0064020e00
64020d0064020c0064020b0064020a006402090064020800640207006402
06006402050064020441ff00640203006402020064020100640200006401
ff006401fe006401fd006401fc006401fb006401fa006401f9006401f800
6401f7006401f6006401f5006401f4006401f3006401f2006401f1006401
f0006401ef006401ee006401ed006401ec006401eb006401ea006401e900
6401e8006401e7006401e6006401e5006401e4006401e3006401e2006401
e1006401e0006401df006401de006401dd006401dc006401db006401da00
6401d9006401d8006401d7006401d6006401d5006401d4006401d3006401
d2006401d1006401d0006401cf006401ce006401cd006401cc006401cb00
6401ca006401c9006401c8006401c7006401c6006401c5006401c4006401
c3006401c2006401c1006401c0006401bf006401be006401bd006401bc00
6401bb006401ba006401b9006401b8006401b7006401b6006401b5006401
b4006401b3006401b2006401b1006401b0006401af006401ae006401ad00
6401ac006401ab006401aa006401a9006401a8006401a7006401a6006401
a5006401a4006401a3006401a2006401a1006401a00064019f0064019e00
64019d0064019c0064019b0064019a006401990064019800640197006401
960064019500640194006401930064019200640191006401900064018f00
64018e0064018d0064018c0064018b0064018a0064018900640188006401
870064018600640185006441800184006401830064018200640181006401
800064017f0064017e0064017d0064017c0064017b0064017a0064017900
640178006401770064017600640175006401740064017300640172006401
71006401700064016f0064016e0064016d0064016c0064016b0064016a00
640169006401680064016700640166006401650064016400640163006401
6200640161006401600064015f0064015e0064015d0064015c0064015b00
64015a006401590064015800640157006401560064015500640154006401
5300640152006401500064014f0064014e0064014c0064014b0064014a00
64014900640148006401470064014600640145006401440064014300642b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b185f5e0000>
[473 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 322 857 <00030096fff704f000de000b00170023002abf0018027c001e000c027b00
120000027cb7062115091b0f034c003f3333cd3232012fe12fe12fe13130
251406232226353436333216051406232226353436333216051406232226
35343633321601692f3c3a2e2f3c3a2e01c32e3c3a2e2f3b3b2d01c42f3c
3a2e2f3c3a2e6c462f2e44462f2e44462f2e44462f2e44462f2e44462f2e
>PBAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/g857 857 def
end
PBAAAA+Calibri /Encoding get
dup 1 /g857 put
pop
end
%ADOEndSubsetFont
/BZUQPM+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/BZUQPM+Calibri*1 
[/.notdef /g857 254{/.notdef}rp]
BZUQPM+Calibri nf
BZUQPM+Calibri*1 [0 -36 -36 0 0 0 ]msf
119.16 563.489 mo
(\001)sh
81.96 200.01 mo
100.2 200.01 li
100.2 199.05 li
81.96 199.05 li
cp
.750179 .679652 .670191 .901488 cmyk
f
81.96 149.37 mo
100.2 149.37 li
100.2 148.41 li
81.96 148.41 li
cp
f
87 198.45 mo
87.12 149.85 li
88.2 149.85 li
88.08 198.45 li
cp
91.44 192.81 mo
87.48 199.53 li
83.64 192.69 li
83.52 192.45 83.52 192.21 83.76 192.09 cv
84 191.97 84.36 191.97 84.48 192.21 cv
87.96 198.21 li
87.12 198.21 li
90.6 192.21 li
90.72 191.97 91.08 191.97 91.32 192.09 cv
91.56 192.21 91.68 192.57 91.44 192.81 cv
cp
83.76 155.61 mo
87.72 148.89 li
91.56 155.61 li
91.68 155.85 91.68 156.21 91.44 156.33 cv
91.2 156.45 90.84 156.33 90.72 156.09 cv
87.24 150.09 li
88.08 150.09 li
84.6 156.09 li
84.48 156.33 84.12 156.45 83.88 156.33 cv
83.64 156.09 83.52 155.85 83.76 155.61 cv
f
159.24 677.969 mo
183.12 677.969 li
183.12 677.009 li
159.24 677.009 li
cp
f
159.24 93.0897 mo
183.12 93.0897 li
183.12 92.1296 li
159.24 92.1296 li
cp
f
170.76 676.529 mo
170.76 93.5696 li
171.84 93.5696 li
171.84 676.529 li
cp
175.2 670.769 mo
171.24 677.489 li
167.4 670.769 li
167.16 670.529 167.28 670.169 167.52 670.049 cv
167.76 669.929 168.12 670.049 168.24 670.289 cv
171.72 676.289 li
170.88 676.289 li
174.36 670.289 li
174.48 670.049 174.84 669.929 175.08 670.049 cv
175.32 670.169 175.32 670.529 175.2 670.769 cv
cp
167.4 99.3297 mo
171.24 92.6097 li
175.2 99.3297 li
175.32 99.5696 175.32 99.9296 175.08 100.05 cv
174.84 100.17 174.48 100.05 174.36 99.8096 cv
170.88 93.8096 li
171.72 93.8096 li
168.24 99.8096 li
168.12 100.05 167.76 100.17 167.52 100.05 cv
167.28 99.9296 167.16 99.5696 167.4 99.3297 cv
f
81.96 346.29 mo
100.2 346.29 li
100.2 345.21 li
81.96 345.21 li
cp
f
81.96 290.01 mo
100.2 290.01 li
100.2 289.05 li
81.96 289.05 li
cp
f
87 344.73 mo
87.12 290.49 li
88.2 290.49 li
88.08 344.73 li
cp
91.44 338.97 mo
87.48 345.69 li
83.64 338.97 li
83.52 338.73 83.52 338.49 83.76 338.37 cv
84 338.13 84.36 338.25 84.48 338.49 cv
87.96 344.49 li
87.12 344.49 li
90.6 338.49 li
90.72 338.25 91.08 338.25 91.32 338.37 cv
91.56 338.49 91.68 338.73 91.44 338.97 cv
cp
83.76 296.25 mo
87.72 289.53 li
91.56 296.25 li
91.68 296.49 91.68 296.73 91.44 296.97 cv
91.2 297.09 90.84 296.97 90.72 296.73 cv
87.24 290.73 li
88.08 290.73 li
84.6 296.73 li
84.48 296.97 84.12 297.09 83.88 296.85 cv
83.64 296.73 83.52 296.49 83.76 296.25 cv
f
254.88 149.37 mo
284.4 149.37 li
284.4 148.41 li
254.88 148.41 li
cp
f
254.88 93.0897 mo
284.4 93.0897 li
284.4 92.1296 li
254.88 92.1296 li
cp
f
269.16 147.93 mo
269.16 93.5696 li
270.12 93.5696 li
270.12 147.93 li
cp
273.6 142.17 mo
269.64 148.89 li
265.68 142.17 li
265.56 141.93 265.68 141.57 265.92 141.45 cv
266.16 141.33 266.4 141.33 266.64 141.57 cv
270.12 147.57 li
269.28 147.57 li
272.76 141.57 li
272.88 141.33 273.12 141.33 273.36 141.45 cv
273.6 141.57 273.72 141.93 273.6 142.17 cv
cp
265.68 99.3297 mo
269.64 92.6097 li
273.6 99.3297 li
273.72 99.5696 273.6 99.9296 273.36 100.05 cv
273.12 100.17 272.88 100.05 272.76 99.8096 cv
269.28 93.8096 li
270.12 93.8096 li
266.64 99.8096 li
266.4 100.05 266.16 100.17 265.92 100.05 cv
265.68 99.9296 265.56 99.5696 265.68 99.3297 cv
f
260.52 290.01 mo
278.76 290.01 li
278.76 289.05 li
260.52 289.05 li
cp
f
260.52 200.01 mo
278.76 200.01 li
278.76 199.05 li
260.52 199.05 li
cp
f
269.16 288.45 mo
269.16 200.49 li
270.12 200.49 li
270.12 288.45 li
cp
273.6 282.81 mo
269.64 289.53 li
265.68 282.81 li
265.56 282.57 265.68 282.21 265.92 282.09 cv
266.16 281.97 266.4 281.97 266.64 282.21 cv
270.12 288.21 li
269.28 288.21 li
272.76 282.21 li
272.88 281.97 273.12 281.97 273.36 282.09 cv
273.6 282.21 273.72 282.57 273.6 282.81 cv
cp
265.68 206.25 mo
269.64 199.53 li
273.6 206.25 li
273.72 206.49 273.6 206.73 273.36 206.97 cv
273.12 207.09 272.88 206.97 272.76 206.73 cv
269.28 200.73 li
270.12 200.73 li
266.64 206.73 li
266.4 206.97 266.16 207.09 265.92 206.97 cv
265.68 206.73 265.56 206.49 265.68 206.25 cv
f
260.52 515.01 mo
278.76 515.01 li
278.76 514.05 li
260.52 514.05 li
cp
f
260.52 346.29 mo
278.76 346.29 li
278.76 345.21 li
260.52 345.21 li
cp
f
269.16 513.45 mo
269.16 346.77 li
270.12 346.77 li
270.12 513.45 li
cp
273.6 507.81 mo
269.64 514.53 li
265.68 507.81 li
265.56 507.57 265.68 507.21 265.92 507.09 cv
266.16 506.97 266.4 506.97 266.64 507.21 cv
270.12 513.21 li
269.28 513.21 li
272.76 507.21 li
272.88 506.97 273.12 506.97 273.36 507.09 cv
273.6 507.21 273.72 507.57 273.6 507.81 cv
cp
265.68 352.53 mo
269.64 345.69 li
273.6 352.53 li
273.72 352.77 273.6 353.01 273.36 353.13 cv
273.12 353.25 272.88 353.25 272.76 353.01 cv
269.28 347.01 li
270.12 347.01 li
266.64 353.01 li
266.4 353.25 266.16 353.25 265.92 353.13 cv
265.68 353.01 265.56 352.77 265.68 352.53 cv
f
260.52 677.969 mo
278.76 677.969 li
278.76 677.009 li
260.52 677.009 li
cp
f
260.52 582.45 mo
278.76 582.45 li
278.76 581.49 li
260.52 581.49 li
cp
f
269.16 676.529 mo
269.16 582.93 li
270.12 582.93 li
270.12 676.529 li
cp
273.6 670.769 mo
269.64 677.489 li
265.68 670.769 li
265.56 670.529 265.68 670.169 265.92 670.049 cv
266.16 669.929 266.4 670.049 266.64 670.289 cv
270.12 676.289 li
269.28 676.289 li
272.76 670.289 li
272.88 670.049 273.12 669.929 273.36 670.049 cv
273.6 670.169 273.72 670.529 273.6 670.769 cv
cp
265.68 588.69 mo
269.64 581.97 li
273.6 588.69 li
273.72 588.93 273.6 589.29 273.36 589.41 cv
273.12 589.53 272.88 589.53 272.76 589.29 cv
269.28 583.29 li
270.12 583.29 li
266.64 589.29 li
266.4 589.53 266.16 589.53 265.92 589.41 cv
265.68 589.29 265.56 588.93 265.68 588.69 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
ct_T42Dict begin
-0.492 -0.191 1.238 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
74204e8a4b2a000001240000069c6670676da1ea42ac000007c000000913
676c79660000000000004238000007a668656164e23fc16c000010d40000
0036686865610f5a12930000110c00000024686d74780000000000001130
000011546c6f63610000000000002284000008c46d61787011c602cb0000
2b48000000206e616d650000000000002b68000000197072657078c65013
00002b84000016b367646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff00000000000000000000000000010000000000000000079e0000fe93
0000000000000000000000700081009c00ab00b500ba00c100ca00d300f3
010a0060008500bf00e300ea00f200fb010001070115011c012900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe83056d000d03c0000600170000fffaffe9fea9
ffe90000050e000600170000fffaffe9fe93050e00170426000600170000
fffaffe9ff12ffed050e00170426000600170000fffaffe9fe93feb8fece
060b0010050e0006001002cbfffafff001edfffa023f00060010ff36fffa
fff00287000600100000fffafff0079efeaffe9f00000000000000000000
0000005f0060006e006f0070007100620067006000720078007a007b007d
007e007f0080008300850086008700890086008c008d008e008f00910092
0093009400950096009700980099009a009b009c009d009e009300960099
009e0094009500000099009a00a000a200a600a800aa00ac00ad00ae00a1
00a200a300a400a500a700a800a900aa00ab00a300a700a800aa00ab00ac
00ad00ae009e00a300a600a700a900aa00ac00ad00af00b000b100ac00ad
00ae00af00b000b100b200b300b400b500af00af00b000b100b200b300b4
00b500b700b800b900b600b700b800b900ba00bb00bc00bd00be00bf00c0
00c100c200c000c100c200b900ba00bb00bd00be00bf00c000c100c200b6
00b700b800b900ba00bb00bc00bd00be00bf00c000c100c200cc00c300c4
00c500c600c700c800c900ca00cb00cc00cd00ce00cf00c400c500c600c7
00c800c900ca00cb00ce00cf00c400c500c600c700c800c900ca00cb00cc
00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd00ce
00cf00d000d100d200d300d400d500d600d800d900da00db00de00df00e2
00e300e400ec00d000d100d400d500d600dc00dd00de00e000e400e200e8
00d000d100d200d300d400d500d600d700d800d900da00db00dc00dd00de
00df00e000e100e200e300e400e600e700e800e900ed00ee00d100d200d3
00d400d500d800d900da00dc00e100e800f600f700fb0108011a011d010e
011300f500f800fb010d011600f600fa0109010d01210127012d012e012f
01340135013b014101420152012f0130006a006b00900091009400960098
0099009a009a009c0077007b008900940092009300a300a400a500a60081
00a900ab00ac00ad00ae00af00b100b300b4009b00bb00bb00bb00bf00bc
00bd00c200c300c400c500c600c700c800c900ca00cb00cd00d000a800ac
00b100b400b500b600b700b800b900ba00bb00bc00bd00be00c200c400c5
00c600c800b400ca000000b400b500b600b700b800b900be00bf00c300c6
00c700c800c900ca00cb00cf00d000aa00ad00ae00b100b200ba00be00c0
00c500c600c800c900cf00d000d100d200d5000000d400d900da00db00dc
00dd00de00e200e500d100d300d400d100d200d800da00db00cb00de00df
00df00e100e200e400e500e600d600d700d100d300d300d400d500d700ce
00d600db00dc00dd00de00c400bb00e100d200d200e000d200d100d300d5
00d600d900d600d600db00c900dc00ac00e100de00de00df00e000e800eb
00ed00e800e900ea00e000e700ed00bc00e300ea00e500ba00e700e800e3
00e800e900ea00cc00ed00f000f200f400ee00ef00f100f200f300f400f4
00f400c100ee00f200ee00ee00f100ef00db00f300db00ee00ef00eb00d7
00f000dd00ec00f500f200f700f700f300f900f500f600fc00fc00f400d9
00fa00fb00fc00f700f700da00f900f600fa00fb00fb00ff00fe00ff0100
01010102010300f900ff0100010000fc00fc00fc00e200fd00e900fe00fa
00fe010100fd010301040106010701080109010a010b010c010d01000101
01070108010900ff0100010100fa01020104010b010c010800ff01000106
0107010800f8010a010b010c010d010f0110011101120113011401150116
00fd010e010f01120118010f011001110109011301140115011601170118
010e010f011001110112011301150000011701180119011a0000011e0120
012100ce011c011e00f6011a011c011d0120012201190102011d000000d5
012301270128012901300133013500000124012500fd012e012f013e013f
012300000125012601270000012b00fe012f0130013c013e014101440145
012300ff012c0136013b013e014600000000000000000000000000000000
0000000002990092000000000000042600d8050e010503c000c2024e0078
042600d740465f5e5d5c5b5a59585554535251504f4e4d4c4b4a49484746
4544434241403f3e3d3c3b3a39383736352f2e2d2c2826252423221f1814
11100f0d0b0a090807060504030201002c4523466020b02660b004262348
482d2c452346236120b02661b004262348482d2c45234660b0206120b046
60b004262348482d2c4523462361b0206020b02661b02061b00426234848
2d2c45234660b0406120b06660b004262348482d2c4523462361b0406020
b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd4423
20b8015a51582320b08d44235920b0ed51582320b04d44235920b0042651
582320b00d44235921212d2c20204518684420b001602045b04676688a45
60442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370
b101283e01b0282370b10228453ab10200080d2d2c2045b00325456164b0
50515845441b2121592d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c2344
45b02b23442d2c4b525845441b2121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c00
b00743b006430b2d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c4523
456023456023456023766818b08062202d2cb00426b00426b00425b00425
45234520b003266062636820b0032661658a2344442d2c2045b0005458b0
40442045b04061441b2121592d2c45b1302f4523456160b0016069442d2c
4b5158b02f2370b01423421b2121592d2c4b515820b0032545695358441b
2121591b2121592d2c45b01443b0006063b0016069442d2cb02f45442d2c
452320458a60442d2c45234560442d2c4b235158b90033ffe0b134201bb3
330034005944442d2cb0164358b00326458a586466b01f601b64b0206066
20581b21b04059b001615923586559b02923442310b029e01b2121212121
592d2cb0164358b004254564b020606620581b21b04059b0016123586559
b0292344b00425b00725082058021b0359b0052510b004252046b0042523
423cb0072510b006252046b00425b0016023423c2058011b0059b0052510
b00425b029e0b0072510b00625b029e0b00425b00725082058021b0359b0
0425b003254348b00625b00325b0016043481b2159212121212121212d2c
b0164358b004254564b020606620581b21b04059b0016123581b6559b029
2344b00525b00825082058021b0359b0042510b005252046b0042523423c
b00425b0072508b0072510b006252046b00425b0016023423c2058011b00
59b0042510b00525b029e0b02920456544b0072510b00625b029e0b00525
b00825082058021b0359b00525b003254348b00425b0072508b00625b003
25b0016043481b2159212121212121212d2c02b00425202046b004252342
b0052508b003254548212121212d2c02b0032520b0042508b00225434821
21212d2c452320451820b00050205823652359236820b040505821b04059
235865598a60442d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2cb000214b54
58381b2121592d2cb002435458b0462b1b21212121592d2cb002435458b0
472b1b212121592d2cb002435458b0482b1b21212121592d2cb002435458
b0492b1b212121592d2c208a08234b538a4b515a5823381b2121592d2c00
20b200400325b0062649618b3812342d2c01462346602346612320102046
8a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c1b21
592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b94000020063b80400885458b20240024360425959
5959592d2c451868234b51582320452064b04050587c59688a6059442d2c
b00016b00225b0022501b001233e00b002233eb10102060cb00a236542b0
0b234201b001233f00b002233fb10102060cb006236542b0072342b00116
012d2c20b82000628a6023622d2cb0072558001b0159b0042510b00325b0
022520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b005
254ab0042547b004254760b0062547b0806361b00225b0005558b00325b0
0725496359b0082558001b0159b00425b0062549b009255cb009255a58b0
092b59b0072546b0806361b0032520b0005558631b2159612320b0005558
b080631b21b08059b0592bb006255c586959b00425202010b00048233ab0
062658001b0159b0052658b003252f598a12233221212d2cb00625b00a25
87b00625b009254ab0005358b00625b00a251bb00925b0072559b00225b0
0225070cb005256323b00625636020b94000040063535821b00426b00426
b00a1bb94000040063655158b0042665b0042665b00a1bb00426b00426b0
00b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b005
2507595920b0005558b00525b0052587b00725b007250bb0092510b00b25
b0092620b8ffff545821cd1bed59b00525b0052507b00825b00b254923b0
0625b0062587b00a2510b00b25c15920b00051b800522378b00161b00225
b00725b0072507b00a25b00d254961b08062b00525b005250bb00a252338
b00625b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b0
0925b00c2549b0032554b8ffa723792121212121212121212121212d2c23
b0005458b9400000001bb900004000598ab0005458b9400000001bb90000
400059b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d
2c8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426
b00426080db00426b00426080db05b2b2d00000100000001051fb1b0afba
5f0f3cf50019080000000000bbeb7ccc00000000c12af472fc0ffe7309ea
079e000300090002000000000000000100000600fe0001c40a7bfc0ffdb7
09ea0800019a0000000000000000000000000455040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e0000040e0000040e0000040e0000040e
0000040e0000040e0000040e0000040e0000040e0000040e0000040e0000
040e0000040e0000040e0000040e00000438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
043800260438002604380026043800260438002604380026043800260438
002604380026043800260438002604380026043800260438002604380026
0438002604380026043800260438002604380026040e0046040e000a040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e0013040e0013040e0013040e0013040e0013040e
0013040e0013040e0013040e0013040e0013040e0013040e0013040e0013
040e0013040e0013040e00130467ffbe000000a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a8013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b013b013b013b013b013b013b
013b013b013b013b013b013b013b013b013b01c602750359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903590359035903590359035903590359
035903590359035903590359035903d303d303d303d303d303d303d303d3
03d303d303d303d303d300010000046100d4000700b0000700020010002f
006000000ce2ffff00040001000000010012000200020000000600070000
43616c69627269000000b10903b802a3b21b341fb8029bb21a351fb8028e
b21a351fb80272b219371fb80271b219371fb80270b219371fb8025cb218
391fb8025bb218391fb8025ab218391fb80223b2173b1fb80222b2173b1f
b80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb802
1db2173b1fb8021cb2173b1fb80219b2173b1fb8021bb2173b1fb80218b2
173b1fb80217b216461fb801e1b216461fb801e0b216461fb801dfb21646
1fb801deb216461fb801ddb216461fb801dcb216461fb801dbb216461fb8
01dab216461fb801d9b216461fb801d8b216461fb801d7b216461fb801d6
b216461fb801d3b216461fb801d5b216461fb801d4b216461fb801d2b216
461fb801d1b216461fb801d0b216461fb801ceb216461fb801cdb216461f
b801ccb216461fb801cbb216461fb801cab216461fb801c9b216461fb801
c8b216461fb801c7b216461fb801c6b216461fb801c4b216461fb801c3b2
16461fb801c2b216461fb801c1b216461fb801bab215461fb801cfb21555
1fb801b9b215551fb801b8b215551fb801b7b215551fb801b6b215641fb8
01b5b215641fb801b4b215641fb801b3b215641fb801b2b215641fb801c5
b215641fb80334b21f2d1fb80333b21f2d1fb80332b21f2d1fb80331b21f
2d1fb80330b21f2d1fb8032fb21b341fb8032eb21f2d1fb8030db21e2f1f
b8030bb21e2f1fb802fbb21d301fb802fab21d301fb802f8b21d301fb802
f7b21d301fb802f6b21d301fb802f5b21d301fb802f4b21d301fb802f3b2
1d301fb802f2b21d301fb802dab21c331fb802d9b21c331fb802d8b21c33
1fb802d7b21c331fb802d5b21c331fb802d4b21c331fb802d3b21c331fb8
02b9b21b341fb8030cb21b341fb802b7b21b341fb802d2b21b341fb802d1
b21b341fb802b6b21b341fb802b4b21b341fb802b8b21a351fb802a2b21a
351fb802a1b21a351fb802a0b21a351fb802b5b21a351fb8029eb21a351f
b802d6b21a351fb8029cb21a351fb8029fb219371fb8028cb219371fb802
8db219371fb80289b2173b1fb80286b219371fb80285b219371fb8026fb2
18391fb8028bb218391fb80287b218391fb8026db218391fb8026cb21839
1fb8026bb218391fb8026ab2173b1fb80255b2173b1fb80259b2173b1fb8
0258b2173b1fb80257b2173b1fb80256b2173b1fb8028ab2173b1fb80253
b2173b1fb80251b2173b1fb8029db2173b1fb8024eb2173b1fb80288b217
3b1fb80250b2173b1fb8024fb2173b1fb8024db2173b1fb8024cb2173b1f
b8030fb2173b1fb8024ab2173b1fb8024bb2173b1fb80216b216461fb802
15b216461fb8026eb216461fb80252b216461fb80214b216461fb80213b2
16461fb80212b216461fb80211b216461fb80210b216461fb8020fb21646
1fb8020eb216461fb8020db216461fb8020cb216461fb8020bb216461fb8
020ab216461fb80254b216461fb80209b216461fb801c0b215641fb801bf
b215641fb8031eb21f2d1fb8031db21f2d1fb8031cb21f2d1fb8031bb21f
2d1fb80319b21f2d1fb80318b21f2d1fb80304b21e2f1fb80303b21e2f1f
b802e7b21d301fb802e6b21d301fb802e5b21d301fb802e4b21d301fb802
c7b21c331fb802c6b21c331fb802c5b21c331fb802c4b21b341fb802c3b2
1b341fb802adb21b341fb802acb21b341fb802abb21b341fb8031ab21a35
1fb80236b2173b1fb80235b2173b1fb80263b216461fb80316b21f2d1fb8
0315b21f2d1fb80314b21f2d1fb80313b21f2d1fb80312b21f2d1fb80311
b21f2d1fb80310b21f2d1fb80301b21e2f1fb80300b21e2f1fb802ffb21e
2f1fb802fdb21e2f1fb802fcb21e2f1fb802e2b21d301fb802e1b21d301f
b802e0b21d301fb802dfb21d301fb802deb21d301fb802ddb21d301fb802
dcb21d301fb802dbb21d301fb802c2b21c331fb802c1b21c331fb802c0b2
1c331fb802bfb21c331fb802beb21c331fb802bdb21c331fb802bcb21c33
1fb802bbb21c331fb802bab21c331fb802a9b21b341fb802a8b21b341fb8
02a7b21b341fb802a6b21b341fb802a5b21b341fb802a4b21b341fb802e3
b21a351fb80295b21a351fb80294b21a351fb80291b21a351fb8028fb21a
351fb80293b219371fb80292b219371fb8027ab219371fb80279b219371f
b80278b219371fb80277b219371fb80290b219371fb80276b219371fb802
75b219371fb80274b219371fb80273b219371fb80262b218391fb8025fb2
18391fb8025eb218391fb8025db218391fb80261b218391fb80234b2173b
1fb80233b2173b1fb80232b2173b1fb80231b2173b1fb80230b2173b1fb8
0260b2173b1fb8022fb2173b1fb8022eb2173b1fb8022db2173b1fb8022b
b2173b1fb8022ab2173b1fb80229b2173b1fb80226b2173b1fb80225b217
3b1fb80224b2173b1fb80228b2173b1fb80227b2173b1fb80302b216461f
b8022cb216461fb801f6b216461fb801f4b216461fb801f3b216461fb801
f2b216461fb801f1b216461fb801f0b216461fb801efb216461fb801eeb2
16461fb801edb216461fb801ecb216461fb801ebb216461fb801eab21646
1fb801e9b216461fb801e8b216461fb801e7b216461fb801e6b216461fb8
01e5b216461fb801f5b216461fb801e4b216461fb801e3b216461fb801e2
b216461fb8032db21f2d1fb8032cb21f2d1fb8032bb21f2d1fb8032ab21f
2d1fb80329b21f2d1fb80328b21f2d1fb80327b21f2d1fb80325b21f2d1f
b80323b21f2d1fb80322b21f2d1fb80321b21f2d1fb8031fb21f2d1fb803
0ab21e2f1fb80309b21e2f1fb80308b21e2f1fb80307b21e2f1fb80306b2
1e2f1fb802f1b21d301fb802f0b21d301fb802efb21d301fb802eeb21d30
1fb802edb21d301fb802ecb21d301fb802eab21d301fb802e9b21d301fb8
02e8b21d301fb802cfb21c331fb802ceb21c331fb802ebb21c331fb802d0
b21c331fb802cdb21c331fb802ccb21b341fb802cab21b341fb802c9b21b
341fb802c8b21b341fb80326b21b341fb802b2b21a351fb802b0b21a351f
b802afb21a351fb802aeb21a351fb8029ab21a351fb80299b21a351fb802
98b21a351fb802cbb21a351fb802aab21a351fb80305b219371fb80296b2
19371fb80283b219371fb80280b219371fb80281b219371fb8027fb21937
1fb8027eb219371fb80265b218391fb802b3b218391fb80269b218391fb8
0268b2173b1fb80266b2173b1fb80264b2173b1fb802b1b2173b1fb80245
b2173b1fb80248b2173b1fb80242b2173b1fb80241b2173b1fb80240b217
3b1fb8023fb2173b1fb80284b2173b1fb80282b2173b1fb80297b2173b1f
b8023cb2173b1fb8023eb2173b1fb8023bb2173b1fb8023ab2173b1fb802
39b2173b1fb80249b2173b1fb80247b2173b1fb80246b2173b1fb80238b2
173b1fb80237b2173b1fb80208b216461fb80207b216461fb8023db21646
1fb80206b216461fb80205b216461fb80204b216461fb80203b216461fb8
0202b216461fb80201b216461fb80244b216461fb80243b216461fb80200
b216461fb8027bb216461fb801ffb216461fb801feb216461fb80267b216
461fb801fdb216461fb801fcb216461fb801fbb216461fb801fab216461f
b801f9b216461fb801f8b216461fb801beb215641fb801bdb215641fb801
bcb215641fb801bbb215641fb801b1b2148b1fb801b0b2148b1fb8027db2
19371fb8027cb219371fb8011e40cf10421ff70e481ff60e481ff50d4a1f
e20d4a1fe10d4a1fe00c4e1fc50c4e1fc40c4e1fc30c4e1fc20c4e1fc10c
4e1fc00c4e1fbf0b561fbe0b561fb40b561fb30b561fb20b561fb10b561f
b00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b
561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa10a681f
a00a681f9f0a681f9e0a681f9d0a681f9c0a681f9b0a681f9a0a681f990a
681f980a681f970a681f960a681f9509771f9109771f9009771f8f09771f
8e09771f8d09771f8c09651fb801a2b213321fb801a1b213321fb801a0b2
12371fb8019fb212371fb80191b212371fb80190b211401fb8018fb21140
1fb8018eb211401fb8018db211401fb8018cb211401fb8018bb211401fb8
018ab211401fb80189b211401fb80188b211401fb80187b211401fb8014e
b211401fb8014db210421fb8014cb210421fb8014bb210421fb8014ab210
421fb80149b210421fb80148b210421fb80147b210421fb80146b210421f
b80145b210421fb80144b20f451fb80143b20f451fb80142b20f451fb801
1db20f451fb8011cb20f451fb8011bb20f451fb8011ab20f451fb80119b2
0f451fb80118b20e481fb80117b20e481fb80116b20e481fb80115b20e48
1fb80114b20e481fb80113b20e481fb80112b20d4a1fb8011140570d4a1f
f40d4a1ff30d4a1ff20d4a1ff10d4a1ff00d4a1fef0d4a1fee0c4e1fdf0c
4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561f
bd0b561fbc0b561fba0b561fb90b561fa20a681f9409771fb80199b21332
1fb80198b213321fb80169b211401fb80168b211401fb80167b211401fb8
0166b211401fb80165b211401fb80164b211401fb80163b211401fb80162
b211401fb80161b211401fb80160b211401fb80135b211401fb80134b210
421fb80133b210421fb80132b210421fb80131b210421fb80130b210421f
b8012fb210421fb8012eb210421fb8012db20f451fb8012cb20f451fb801
07b20f451fb80106b20f451fb80105b20f451fb801adb213141fb801acb2
131b1fb801abb2131b1fb801aab213231fb801a9b213231fb801a8b21323
1fb801a7b213321fb801a6b213321fb801a5b213321fb801a4b213321fb8
01a3b213321fb80197b213321fb80196b213321fb80195b213321fb80194
b212371fb80193b212371fb80192b212371fb8015fb212371fb8015eb211
401fb8015db211401fb8015cb211401fb8015bb211401fb8015ab211401f
b80159b211401fb80158b211401fb80157b211401fb80156b211401fb801
55b211401fb80154b211401fb80153b211401fb80152b211401fb80151b2
11401fb80150b211401fb8014fb211401fb8012bb211401fb8012ab21042
1fb80129b210421fb80128b210421fb80127b210421fb80126b210421fb8
0125b210421fb80124b210421fb80123b210421fb80122b210421fb80121
b20f451fb80120b20f451fb8011fb20f451fb80104b20f451fb80103b20f
451fb80102b20f451fb80101b20f451fb8010040830e481fff0e481ffe0e
481ffd0e481ffc0e481ffb0e481ffa0d4a1ff90d4a1ff80d4a1fec0d4a1f
eb0d4a1fea0d4a1fe90d4a1fe80d4a1fe70d4a1fe60c4e1fe50c4e1fe40c
4e1fe30c4e1fcf0c4e1fce0c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1f
c90c4e1fc80c4e1fc70c4e1fc60c4e1fb80c4e1fb70b561fb60b561fb50b
561fb801afb213321fb801aeb213321fb8019eb213321fb8019db213321f
b8019cb212371fb8019bb212371fb8019ab212371fb80186b212371fb801
85b2112e1fb80184b211401fb80183b211401fb80182b211401fb80181b2
11401fb80180b211401fb8017fb211401fb8017eb211401fb8017db21140
1fb8017cb211401fb8017bb211401fb8017ab211401fb80179b211401fb8
0178b211401fb80177b211401fb80176b211401fb80175b211401fb80174
b211401fb80173b211401fb80172b211401fb80171b211401fb80170b211
401fb8016fb211401fb8016eb211401fb8016db211401fb8016cb211401f
b80141b211401fb80140b210421fb8013fb210421fb8013eb210421fb801
3db210421fb8013cb210421fb8013bb210421fb8013ab210421fb80139b2
10421fb80138b210421fb80137b20f451fb80136b20f451fb80110b20f45
1fb8010fb20f451fb8010eb20f451fb8010db20f451fb8010cb20f451fb8
010bb20e481fb8010ab20e481fb80109b20e481fb80108402f0e481fed0c
4e1fd70c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1f
d00b561f9309771f9209771fb8016bb212371fb8016a406e11401f850325
1f84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d4b
7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a79
48775578ab77550b77010c764875555475e475f475031475547564757475
9475d475e47507a475b475c47503b8ffc0401275383b4680759075021475
7475020075010fb8ffc04021750b0e467448725573ab725504723472023b
e47201d07201022072014072507202b8ffc0b372242846b8ffc040ff7216
1a460072207230720371486f5570ab6f556e486d55cf6d016a03251f692e
675568ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d55
5c2e5a555bab5a55592e58555703251f562e545555ab5455532e515552ab
51554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab485550480147
2e46554503361f001f01001e01001e701e801ef01e040b601d701d02701d
e01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a02
0f191f198f199f19af19050f198f199f19030c7012801202701180110230
114011d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04
af0f01af0ebf0ecf0e034f0e5f405e0e6f0e030f0eaf0ebf0e0310400e2e
31460f0d1f0d2f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d242746
3f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a2427464009262d46
4009171b460003012001010001100120010308b8ffc0b401151f4603bc01
000100000500010190b154532b2b4bb807ff524bb009505bb00188b02553
b00188b040515ab00688b000555a5b58b101018e59b101024354b0144b51
5a58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb0805358
b20340401d42594bb0ff5358b20300001d42592b5e7375732b2b2b732b73
742b2b73745e732b5e7374757374755e73747573015e7374737475757473
745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b732b2b2b732b2b73755f75755e732b2b2b5e7373732b7374752b5e73
2b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f
5e0000>
[1959 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 630 1005 <000100460000036e0517002e008dba0346034700582bb10102435558b900
30ffc040180f024d0030010f032a142b1320141314001a0b2a25081514b8
019db325522b13b8013db3400854282b183f1a4dfdc43ffdcd111239012f
c4cd393911331133113331305f5e5d2b1b400a0030010f032a25081514b8
019db325522b13b8013db3400854282b183f1a4dfdc43ffdcd1112393130
015f5e5d5925140e042321222635343e04333313070606262635343e0237
253e0333321e020703333216036e03070a0f140bfd350d0e03070b0f140d
f0a6e8141a0e05050e1711013d071019281f262e170401d5d50d0ca1071e
252420131616071d23261e14033f73090507120f0e2f332c09b404050301
03070c09fbd31500>HIBBAA+Calibri AddT42Char 
1 908 1006 <0001000a000003f10525004300a6ba0346034700582bb10102435558b900
45ffc040090f024d0045010f0340b802cdb71212270027000d1ab8032cb2
380d2ebb017e0024001f018540091a133f030833531240b80171b3400854
282b183f1a4dfdc13f121739fdd4ed012fdded1239392f2f3910ed31305f
5e5d2b1bb50045010f032ebb017e0024001f018540091a133f0308335312
40b80171b3400854282b183f1a4dfdc13f121739fdd4ed3130015f5e5d59
25140e042321222e0235343e0237013e0535342e0223220e022322263534
3e04373e0333321e0215140e040707213216037b03080b0f130dfd18141a
10060612251e01313c593e2716070c1e352935604e370c0d0b0205090a0f
0a0c4763793f698c52220f2542658f61b801ed120ea3071f24261f14060e
140e0f323d3f1b010b365e50463a3113132a23171f251f1815081c222523
1d0a0c262319355365302c595f6777874f9b1e00>HIBBAA+Calibri AddT42Char 
1 1258 1007 <00010013ffe903e60525005a00ddba0346034700582bb10102435558b900
5cffc040090f024d005c010f0320b80327400d0055290041290000294103
0f36b80321b2500f0cbb0179001600460139b63e163e163e1b39b8016cb2
4b5531b8010fb52525074b531bb8016eb3400756282b183f1a4ded3f1239
2fed3910ed1139392f2f10ed10ed012fd4ed1217392f2f2f11123910ed31
305f5e5d2b1bb5005c010f030cbb0179001600460139b63e163e163e1b39
b8016cb24b5531b8010fb52525074b531bb8016eb3400756282b183f1a4d
ed3f12392fed3910ed1139392f2f10ed10ed3130015f5e5d5901140e0423
222e0227262635343e0433321e0233323e0235342e022323222635343e04
3333323e0235342623220e0223222635343e02373e0333321e0215140e02
07151e0303a61837577ea96c315951441b120e0306080c0f0a0b2c45603f
47674421173759437b141103070c0f150d70436a492744503461503a0c0c
0b050b130c0d436279415a85572a294d6f464159381901a72f66635a4428
0b131b100b1c16081e23251f131a201a273f5029213829181115071e2224
1d13253f532f374320262015120a2a312f0c0c2624192747653e40786248
110307314552>HIBBAA+Calibri AddT42Char 
1 336 374 <00010026fffa03e703d7003a007aba0348034900582bb10102435558400c
311a1a1b26030f040e250f15b80158401440364a040e1b251a0f31260820
2b49204c094c282b183f3f3f1217393f1a4ded012f2fc4321133cd333211
3331301bb900150158401440364a040e1b251a0f312608202b49204c094c
282b183f3f3f1217393f1a4ded31305901140607030e0323222e02371336
3635342623220e0207030e0323222e0237133e0333321e0207073e033332
1e0203e709076f020f1f3125252f1a09026c0505262d29594f3e0d51020f
1f3224252f1b0802b3020d1b2b1e1f271607021d15465b6b3a465f3b1a02
d7234625fdd90a0f0a05050a0f0a02171832132d3a34597743fe6c0a0f0a
05050a0f0a037d0a0f090505090f0a9323493a2529465d00>HIBBAA+Calibri AddT42Char 
1 0 0 <00050000fe7303e0050e00030007003b00550056004fb52d162d16083c41
0a023a0049000701b00002002002000008000101b1401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103e0fc4f03
46fd240276204468481e032d25161f1207011905231a0b2f4228120d1d2f
23263a291a06080704060a07082737422245674422fecb04080e090e2b20
1c23130604090f0b0d29211a221307fe26050efaf2050efb570444fbbc03
1136654e3306790d0b02050908a7211b1e303b1e14251d110d0f0d0e0e07
1c1f1c0707120f0a233d51fd9e091c201d0a0d0e0910150c0b1d1f1e0a0e
0c080f16fd21>HIBBAA+Calibri AddT42Char 
HIBBAA+Calibri /CharStrings get begin
/g1005 1005 def
/g1006 1006 def
/g1007 1007 def
/g374 374 def
end
HIBBAA+Calibri /Encoding get
dup 1 /g1005 put
dup 2 /g1006 put
dup 3 /g1007 put
dup 4 /g374 put
pop
end
%ADOEndSubsetFont
/BZUQPN+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/BZUQPN+Calibri*1 
[/.notdef /g1005 /g1006 /g1007 /g374 251{/.notdef}rp]
BZUQPN+Calibri nf
BZUQPN+Calibri*1 [0 -24 -24 0 0 0 ]msf
152.88 124.769 mo
(\001)sh
155.88 254.129 mo
(\002)sh
152.88 439.769 mo
(\003)sh
152.88 636.689 mo
(\004)sh
%ADOBeginSubsetFont: QJJAAA+Calibri Initial
ct_T42Dict begin
-0.473 -0.191 1.211 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420b49aceb9000001240000050e6670676da1ea42ac0000063400000913
676c7966000000000000396000001d8068656164e22cc15400000f480000
0036686865610f48129000000f8000000024686d74780000000000000fa4
00000fbc6c6f63610000000000001f60000008c46d6178700ecd03040000
2824000000206e616d650000000000002844000000197072657065f2c424
00002860000010fd67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff00000000000000000000000000010000000000000000079e0000fe93
0000000000000000000000000050006a0073008000800086008d009300bf
00db006200830093009900a000a600a900b000c100c900d7000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000fe79056d000c03b7000600130000fffaffedfea6
ffedfeb8050e000600130000fffaffedfe93050e00130420000600130000
fffaffedff10ffee050e00130420000600130000fffaffeefe93ff10feb8
0612000a050e0006000d02d2fffafff301fdfffa023f0006000dff36fffa
fff302870006000f0000fffafff1079efeaffea700000000000000000000
0000004a004c00540055005600570059004f004e004f00500051004d005d
005f00610063006400650066006700680069006a006b006c006d006e006d
0066006f0070007100720073007400750076007100740070007100720074
0075007600780079007a007d00780079007a007b007c007d0079007c007a
007c007d007e007f00800081007e007f008000810082007f008000810082
007e007f0080008100820083008500830084008500860087008800890086
008800890083008400850086008700880089008300840085008600870088
0089008a008b008c008d008e008f008a008b008c008d008f008a008b008c
008d008e008f008a008b008c008d008e008f009000950090009100920093
0094009500980099009a009b009c00900091009300960097009b009c009f
00a2009400960090009100920093009400950096009700980099009a009b
009c009d009e009f00a000a100a200a300a600a700900091009200930094
0095009600980099009f00bc00bd00c100c600be00bf00bf00c100c200b9
00be00c200df00e000e400e700e800e9012b0136014700f200f400cf0064
0066006a006c006d0070006c006d0069006c006700730074007500760077
0078007a007b007c007d007e0081008400850086008700880089008a0076
007a007b007c007e007f0080008200830084008700880089008a00770085
00870079008200840085008600870088008a0079007a007c007d007e0081
008300840086008700880089008b008c008d008e008f0090009100920094
0095008b008c008d008e008f0093009400950093008b008c008d008e0090
0091009200930094008c008d008e008f0090009100920093009400950097
00980099009a009b009c0096009700980099009a009b009c009a009c0096
00980099009a009b009c00960097009b009c009d009e009f00a000a100a2
009d009e009f00a000a100a200a1009d009e009f00a000a100a2009d009e
009f00a000a100a200a300a500a300a400a500a600a700a300a500a300a4
00a500a600a700a300a400a500a600a700a800a900a800a900aa00ab00ac
00a800ab00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00ad00ae
00af00b000b100b300b500b600b700b800af00b000b100b300b400b700ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700ba00bb00bc00bd00bf00c000c100c2
00c300c400ba00bb00bf00c300b900ba00bb00bc00bf00c100c200c300ba
00bc00bf00c200c700c900cb00cc00cd00c500c600c700c600c700cb00ce
00cf00d100d200db00dc00de00df00e000e400d600e800e90123012b00d0
00d1042600d8050e010503c000c2024e0078042600d70299009200004046
5f5e5d5c5b5a59585554535251504f4e4d4c4b4a49484746454443424140
3f3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a
090807060504030201002c4523466020b02660b004262348482d2c452346
236120b02661b004262348482d2c45234660b0206120b04660b004262348
482d2c4523462361b0206020b02661b02061b004262348482d2c45234660
b0406120b06660b004262348482d2c4523462361b0406020b02661b04061
b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a5158
2320b08d44235920b0ed51582320b04d44235920b0042651582320b00d44
235921212d2c20204518684420b001602045b04676688a4560442d2c01b1
0b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0
282370b10228453ab10200080d2d2c2045b00325456164b050515845441b
2121592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061
b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03
458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d
2c4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c00b00743b00643
0b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2c4523456023456023
456023766818b08062202d2cb00426b00426b00425b0042545234520b003
266062636820b0032661658a2344442d2c2045b0005458b040442045b040
61441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f23
70b01423421b2121592d2c4b515820b0032545695358441b2121591b2121
592d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60
442d2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944
442d2cb0164358b00326458a586466b01f601b64b020606620581b21b040
59b001615923586559b02923442310b029e01b2121212121592d2cb01643
58b004254564b020606620581b21b04059b0016123586559b0292344b004
25b00725082058021b0359b0052510b004252046b0042523423cb0072510
b006252046b00425b0016023423c2058011b0059b0052510b00425b029e0
b0072510b00625b029e0b00425b00725082058021b0359b00425b0032543
48b00625b00325b0016043481b2159212121212121212d2cb0164358b004
254564b020606620581b21b04059b0016123581b6559b0292344b00525b0
0825082058021b0359b0042510b005252046b0042523423cb00425b00725
08b0072510b006252046b00425b0016023423c2058011b0059b0042510b0
0525b029e0b02920456544b0072510b00625b029e0b00525b00825082058
021b0359b00525b003254348b00425b0072508b00625b00325b001604348
1b2159212121212121212d2c02b00425202046b004252342b0052508b003
254548212121212d2c02b0032520b0042508b0022543482121212d2c4523
20451820b00050205823652359236820b040505821b04059235865598a60
442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb000214b5458381b212159
2d2cb002435458b0462b1b21212121592d2cb002435458b0472b1b212121
592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b2121
21592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325
b0062649618b3812342d2c014623466023466123201020468a61b8ff8062
8ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b5258
7d1b7a592d2cb012004b014b54422d2cb1020042b123018851b140018853
5a58b910000020885458b202010243604259b12401885158b92000004088
5458b2020202436042b12401885458b2022002436042004b014b5258b202
0802436042591bb940000080885458b202040243604259b94000008063b8
0100885458b202080243604259b94000010063b80200885458b202100243
604259b94000020063b80400885458b202400243604259595959592d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d00000100000001051fb1b0afba5f0f3cf50019
080000000000bbeb7ccc00000000c12af45afc31fe7309b6079e00020009
0002000000000000000100000600fe0001c40a4efc31fde109b60800019a
00000000000000000000000003ee040e0000040e0000040e000001cf0000
01cf000001cf000001cf000001cf000001cf000001cf000001cf000001cf
000001cf000001cf000001cf000001cf000001cf000001cf000001cf0000
01cf000001cf000001cf000001cf000001cf000001cf000001cf000001cf
000001cf000001cf000001cf000001cf000001cf000001cf000001cf0000
01cf000001cf000001cf000001cf000001cf000001cf000001cf000001cf
000001cf000001cf000001cf000001cf000001cf00000204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
005202040052020400520204005202040052020400520204005202040052
020400520204005202040052020400520204005202040052020400520204
0052020400520204005202040052020400520204005202040052041d0051
041d0051041d0051041d0051041d0051041d0051041d0051041d0051041d
0051041d0051041d0051041d0051041d0051041d0051041d0051041d0051
041d0051041d0051041d0051041d0051041d0051041d0051041d0051041d
0051041d0051041d0051041d0051041d005103d2004d03d2004d03d2004d
03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2
004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d
03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2
004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d
03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2
004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d
03d2004d03d2004d041d0042041d0042041d0042041d0042041d0042041d
0042041d0042041d0042041d0042041d0042041d003f041d003f041d003f
01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6
003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f
01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6003f01d6
003f01d6003f0654003f041d003f041d003f041d003f041d003f041d003f
041d003f041d003f041b004e041b004e041b004e041b004e041b004e041b
004e041b004e041b004e041b004e041b004e041b004e041b004e041dfff9
041dfff9041d005102be003f02be003f02be003f02be003f031d0009031d
0009031d0009031d0009031d0009031d0009031d0009031d0009031d0009
031d000902ae007102ae007102ae007102ae007102ae007102ae007102ae
007102ae007102ae007102ae007102ae007102ae007102ae007102ae0071
02ae007102ae007102ae007102ae007102ae007102ae007102ae007102ae
007102ae007102ae007102ae007102ae007102ae0071041d0070041d0070
041d0070041d0070041d0070041d0070041d0070041d0070041d0070041d
0070041d0070041d007005b8008f05b8008f05b8008f05b8008f05b8008f
05b8008f0394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
001503940015039400150394001503940015039400150394001503940015
039400150394001503940015039400150394001503940015039400150394
0015039400150394001503940015039400150205004a0205004a0205004a
0205004a0205004a0205004a0205004a0205004a0205004a0205004a0205
004a0205004a0205004a0205004a0205004a0205004a0205004a0205004a
0205004a0205004a0205004a0205004a0205004a0205004a0205004a0205
004a0205004a0205004a0205004a0205004a0205004a0205004a0205004a
0205004a03fcff5f03fcff5f03fcff5f03fcff5f026d0075026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc
026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026dffdc026d
ffdc026dffdc026dffdc026dffdc040e005f00200023000000a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800a8
00a800a800a800a800a800a800a800a800a800a800a800a800a800a800ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef00ef
018a018a018a018a018a018a018a018a018a018a018a018a018a018a018a
018a018a018a018a018a018a018a018a018a022702270227022702be02be
02be02be02be02be02be02be02be02be02be02be02be02be02be02be02be
02be02be02be02be02be02be02be02be02be02be02be02be02be02be02be
02be02be02be02be02be02be02be02be02be02be02be02be02be02be02be
02be02be02be038703870387038703870387038703870387038704240424
042404990499049904990499049904990499049904990499049904990499
049904990499049904e104e104e104e104e104e105b40647064706470647
06470647064706b506b506b506b506b506b506b506b506b506b506b506b5
075907590802088308830883088309380938093809380938093809380938
0938093809dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc
09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc09dc0a6d
0a6d0a6d0a6d0a6d0a6d0a6d0a6d0a6d0a6d0a6d0a6d0b1c0b1c0b1c0b1c
0b1c0b1c0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a
0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0b9a0bce0bce
0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce
0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce0bce
0bce0bce0bfd0bfd0bfd0bfd0c500ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca3
0ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30ca30d2f0dde0ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec00ec0
0ec00ec00ec00ec00ec00ec00ec00ec000010000046100d4000700b00007
00020010002f0060000009e9ffff00040001000000010012000200020000
00060007000043616c69627269000000b10903b8027ab21e3e1fb80279b2
1e3e1fb80278b21e0b1fb80277b21e0b1fb80276b21e3a1fb80275b21e3a
1fb80274b21e3e1fb80273b21e3b1fb80272b21e3c1fb80271b21e3c1fb8
0270b21e3c1fb8026fb21e3d1fb8026eb21e3d1fb8026db21e3e1fb8026c
b21e3e1fb8026bb21d411fb8026ab21d411fb80269b21d421fb80268b21d
431fb80267b21d431fb80266b21d431fb80265b21d431fb80264b21d431f
b80263b21d411fb80262b21d421fb80261b21d421fb80260b21d431fb802
5fb21d431fb8025eb21c451fb8025db21c451fb8025cb21c451fb8025bb2
1c451fb8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c45
1fb80256b21c451fb80255b21c451fb80254b21c451fb80252b21c451fb8
0251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c441fb8024d
b21c451fb8024cb21c451fb8024bb21c451fb8024ab21c451fb80249b21c
451fb80248b21c451fb80247b21c451fb80246b21c451fb80245b21c451f
b80244b21b491fb80243b21b4a1fb80242b21b4a1fb80241b21b4a1fb802
40b21b4b1fb8023fb21b4b1fb8023eb21b4c1fb8023db21b4c1fb8023cb2
1b4c1fb8023bb21b4c1fb8023ab21b4c1fb80253b21b4c1fb80239b21b49
1fb80238b21b491fb80237b21b4a1fb80236b21b4a1fb80235b21b4a1fb8
0234b21b4b1fb80233b21b4b1fb80232b21b4c1fb80231b21b4c1fb80230
b21b4c1fb8022fb21b4c1fb8022eb21b4c1fb8022db21b491fb8022cb21b
4a1fb8022bb21b4b1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1f
b80227b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb802
23b21b4b1fb80222b21b4c1fb80221b21b4c1fb80220b21b4c1fb8021fb2
1b4c1fb8021eb21b4c1fb8021db21a4e1fb8021cb21a4e1fb8021bb21a4f
1fb8021ab21a4f1fb80219b21a4f1fb80218b21a4e1fb80217b21a4e1fb8
0216b21a4f1fb80215b21a4f1fb80214b21a4f1fb80213b21a4e1fb80212
b21a4e1fb80211b21a4f1fb80210b21a4e1fb8020fb21a4e1fb8020eb21a
4f1fb8020db21a4f1fb8020cb21a4f1fb8020bb21a4f1fb8020ab21a4f1f
b80209b219501fb80208b219511fb80207b219511fb80206b219511fb802
05b219511fb80204b219501fb80203b219511fb80202b219511fb80201b2
19511fb80200b219511fb801ffb219511fb801feb219511fb801fdb21950
1fb801fcb219511fb801fbb219511fb801fab219511fb801f9b219511fb8
01f8b219511fb801f7b219511fb801f6b218531fb801f5b218531fb801f4
b218541fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218
531fb801efb218531fb801eeb218541fb801edb218541fb801ecb218541f
b801ebb218541fb801eab218531fb801e9b218531fb801e8b218531fb801
e7b218541fb801e6b218541fb801e5b218541fb801e4b218541fb801e3b2
18531fb801e2b218531fb801e1b218541fb801e0b218541fb801dfb21854
1fb801deb218541fb801ddb217561fb801dcb217561fb801dbb217571fb8
01dab217571fb801d9b217561fb801d8b217561fb801d7b217571fb801d6
b217571fb801d5b217571fb801d4b217571fb801d3b217561fb801d2b217
571fb801d1b217561fb801d0b217561fb801cfb217571fb801ceb217571f
b801cdb217571fb801ccb217571fb801cbb217571fb801cab217561fb801
c9b217561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b2
17571fb801c4b2163e1fb801c3b2163f1fb801c2b2163f1fb801c1b2165b
1fb801c0b2165b1fb801bfb2165b1fb801beb2165b1fb801bdb2165b1fb8
01bcb2165b1fb801bbb2165b1fb801bab2163f1fb801b9b2163f1fb801b8
b2165b1fb801b7b2165b1fb801b6b2165b1fb801b5b2165b1fb801b4b216
5b1fb801b3b2165b1fb801b2b2165b1fb801b1b2163f1fb801b0b2163e1f
b801afb2163f1fb801aeb2163f1fb801adb2165b1fb801acb2165b1fb801
abb2165b1fb801aab2165b1fb801a9b2165b1fb801a8b2163e1fb801a7b2
163f1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b
1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2165b1fb8
019eb215621fb8019db215621fb8019cb215631fb8019bb215641fb8019a
b215651fb80199b215661fb80198b215661fb80197b215661fb80196b215
661fb80195b215661fb80194b215661fb80193b215661fb80192b215611f
b80191b215621fb80190b215631fb8018fb215641fb8018eb215641fb801
8db215651fb8018cb215661fb8018bb215661fb8018ab215631fb80189b2
15641fb80188b215551fb80187b215611fb80186b215621fb80185b21562
1fb80184b215631fb80183b215651fb80182b215661fb80181b215661fb8
0180b215661fb8017fb215661fb8017eb215661fb8017db215661fb8017c
b215661fb8017bb215661fb8017ab215451fb80179b215611fb80178b215
621fb80177b215621fb80176b215631fb80175b215641fb80174b215641f
b80173b215651fb80172b215661fb80171b215661fb80170b215661fb801
6fb215661fb8016eb215661fb8016db215661fb8016cb215661fb8016bb2
15551fb8016ab215451fb80169b215451fb80168b215361fb80167b21536
1fb80166b214821fb80165b214561fb80164b2147f1fb80163b214551fb8
0162b214561fb80161b214401fb80160b214551fb8015fb214561fb8015e
b2147e1fb8015db214831fb8015cb214851fb8015bb2133d1fb8015ab213
1e1fb80159b2131e1fb80158b2130a1fb80157b2130a1fb80156b2130b1f
b80155b2133a1fb80154b2133a1fb80153b2133a1fb80152b2133b1fb801
51b2133c1fb80150b2133c1fb8014fb212451fb8014eb212461fb8014db2
12461fb8014cb212451fb8014bb212451fb8014ab212461fb80149b21246
1fb80148b212461fb80147b212441fb80146b212451fb80145b212461fb8
0144b212461fb80143b211471fb80142b211571fb80141b211581fb80140
b211591fb8013fb2115a1fb8013eb2115a1fb8013db2115b1fb8013cb211
5b1fb8013bb2115b1fb8013ab2115b1fb80139b2112b1fb80138b2112c1f
b80137b211391fb80136b211391fb80135b211461fb80134b211471fb801
33b211471fb80132b211551fb80131b211551fb80130b211561fb8012fb2
11561fb8012eb211571fb8012db211571fb8012cb211581fb8012bb21159
1fb8012ab211591fb80129b2115a1fb80128b2115a1fb80127b2115b1fb8
0126b2115b1fb80125b2115b1fb80124b2115b1fb80123b211591fb80122
b2115a1fb80121b211391fb80120b211471fb8011fb211561fb8011eb211
561fb8011db211591fb8011cb211591fb8011bb2115b1fb8011ab2115b1f
b80119b2115b1fb80118b211561fb80117b211561fb80116b211571fb801
15b211571fb80114b211581fb80113b2115a1fb80112b2115a1fb80111b2
115b1fb80110b2115b1fb8010fb2115b1fb8010eb2115b1fb8010db2115a
1fb8010cb2115b1fb8010bb2105d1fb8010ab2105e1fb80109b2105f1fb8
0108b2105f1fb80107b2105f1fb80106b2105f1fb80105b2105d1fb80104
b2105e1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff
105f1fff105d1ffe105f1ffd105f1ffc105f1ffb105f1ffa105d1ff9105e
1ff8105f1ff7105f1ff6105f1ff5105f1ff40f621ff30f621ff20f631ff1
0f641ff00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f64
1fe90f641fe80f641fe70f641fe60f621fe50f621fe40f641fe30f621fe2
0f621fe10f631fe00f641fdf0f641fde0f641fdd0f641fdc0f641fdb0f64
1fda0e671fd90e681fd80e681fd70e681fd60e681fd50e671fd40e681fd3
0e681fd20e681fd10e671fd00e681fcf0e681fce0e681fcd0e681fcc0e68
1fcb0e681fca0e681fc90e681fc80d6b1fc70d6c1fc60d2a1fc50d6c1fc4
0d2c1fc30d6b1fc20d6c1fc10d6d1f40ffc00d6a1fbf0d691fbe0d681fbd
0d6b1fbc0d311fbb0d311fba0d311fb90c711fb80c721fb70c731fb60c74
1fb50c741fb40c741fb30c731fb20c741fb10d311fb00d311faf0d311fae
0d311fad0d311fac0d311fab0d311faa0d311fa90b7e1fa80b7a1fa70b79
1fa60b7a1fa50b7c1fa40b7d1fa30b7e1fa20b7e1fa10b7e1fa00b7e1f9f
0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b0b7e1f9a0b2d1f990b2d1f980aa7
1f970aa51f960aa71f950aa71f940aa71f930aa71f920a681f910a821f90
0a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c0aa71f8503251f8403381f830138
1f8255805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7d
db7d404d060a7c557a557bab7a557955775578ab775576ab755504751475
747503f47501ab750144750130750102007510752075030c7455725573ab
7255007250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8
ffc0407c720d104671556f5570ab6f556e666d556a03251f6938675568ab
67556638645565ab645563386255613860555f385d555eab5d555c385a55
5bab5a55593858555703251f5638545555ab54555338515552ab51554f38
4e554e03251f4d384b554cab4b554a38485549ab4855473846554503381f
001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04
001bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18
cf18024018292c460f17cf17df17ef1704134017292e4600161016201603
15b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d
162326460f15010f151f1502451f15010011e011f0110315bf10cf10020f
0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f
0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b
02553f0b4f0b02400b3f4346400b2d304600030120010100011001200103
08b8ffc0b401151f4603bc01000100000500010190b154532b2b4bb807ff
524bb009505bb00188b02553b00188b040515ab00688b000555a5b58b101
018e59b101024354b0144b515a58b101018e59858d8d001d424bb01d5358
b203a0a01d42594bb0805358b20340401d42594bb0ff5358b20300001d42
592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e7374
2b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e
732b2b5e735f73737373742b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b185f5e00000000>
[7553 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3762 395 <00020051fe9403e103ca002d0040009cba027f028000582bb10102435558
4016242e2d403f0c0b0a2e2d000a0a002e102e0213032e38b8021e401a1a
2d0a000305284910402e24041531f9214a3bf840154d054f282b183f3f1a
4ded3fed1217393f121739012fedc45f5e5d392f33327d870ec4c4c4c411
12013931301b40192d0a000305284910402e24041531f9214a3bf840154d
054f282b183f3f1a4ded3fed1217393f121739313059010e0323222e0237
133e03370e0323222e0235343e043332161737363633321e020707262623
220e0415141633323e023702e5020a142119171f11060142050e0f0e0710
465c6e394767411f152f4a6a8c5a597f3213042628141b100401d32f6d44
385943301e0d4744376f604a12feb4080c080404080c0801451a36353012
224b3e282e567749378f938e6e44483f5b100f04080c07ec454535586e72
6a2763613d6c9357>QJJAAA+Calibri AddT42Char 
1 5048 437 <00010070ffed03e203bc003c0075ba027f028000582bb101024355584022
0b1800313c323123241918000b18243119233c32090537491e492cf84010
4d054c282b183f3f1a4ded3f3f121739012fcd3332c4c432113311393130
1b4017000b18243119233c32090537491e492cf840104d054c282b183f3f
1a4ded3f3f121739313059250e0323222e0237370e0323222e0235343637
133e0333321e020703060615141e0233323e0237133e0333321e0207032c
010a121d15141b0f05022110455d6f39445d391909076f020a152118181f
1105016e06060b1b2b1f356f604b124f010b152118181f11050119080c07
0404070c08a9224b4028254159352145230234070c080303080c07fdd21a
381d1e3124143d6c9558018e070c080303080c07>QJJAAA+Calibri AddT42Char 
1 1102 286 <0002004dffed039d03ca002e003c0087ba027f028000582bb10102435558
b62a323706040009b8020e400923110c1e031414232fb8020d4015002306
be37372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f11
12392fed012fd4ed12392f173910ed11173931301b401306be37372a1e11
110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f1112392fed3130
5901140e022323060615141633323e0233321615140e02070e0323222e02
35343e0433321e0207342623220e020733323e02039d4088d4946a070563
6f40664b3009090904080d080c3d5464325986592c193656779c6254754b
22a9504a41644d371166698d552302e5456e4e2a213e1b646a1316130d0c
0a1c1d1a090c17130c28537c5441959286663e2a425137333f2d4c65381a
2d3c>QJJAAA+Calibri AddT42Char 
1 6044 890 <0001ff5efe93036bff1800150018b6000b12df084f28ba027f028000582b
2b3fed012fcd313001140e042321222635343e0433213216036b0205080c
0e0afc3d0d0a0204080b0f0a03c20d0cfef506131516130b130e06131517
140b1300>QJJAAA+Calibri AddT42Char 
1 4720 410 <00010071ffef02c504ad0045008aba027f028000582bb101024355584029
362c2b372b42080941094137092b2b30371737170030424837413c082ce3
092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f012fcd
39392f2f123911331133107d87c4c41087c4c431301b4013424837413c08
2ce3092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f31
305901140e04232303060615141633323e0233321615140e02070e032322
2e0235343e02371323222635343e023333373e0333321e02070733321602
c502060a0b0e09e66504062b301b281d1608080905080c0708202a2f1738
52381b02050503657d0b0c060c130d7e2b010b142118181f1105012be60f
0a039309151616110afe0a153411332f090a090b0f0d1f1e1807070e0b06
18334d360c1d20200e01fa0d130e252016d6070c090404090c07d616>QJJAAA+Calibri AddT42Char 
1 2120 349 <0002003ffffa01ef052f00130029006aba027f028000582bb10102435558
b4291f141e00b80262400b0a1f1e1e141f290424190fb80147b605402449
194c282b183f3f1ade4ded11121739012fd6d4ed1133113331301bb71e14
1f290424190fb80147b605402449194c282b183f3f1ade4ded1112173931
3059010e0323222e02373e0333321e02010e0323222e0237133e0333321e
020701e905111c2a1e1d2612020506121b2a1e1d251302fef7020a142118
191f110502b3010a142119181f11050104cc1c26170a0a17261c1c251909
091925fb31080b080404080b080384070c080404080c0700>QJJAAA+Calibri AddT42Char 
1 2498 373 <0001003ffffa05e703ca005b00a7ba027f028000582bb101024355584039
442d2d2e39171622214e225b005b0b000a0113030a38220b534a1128f940
494a382e21170a00162d0b225b4e44390e333e49334c1c4c054c282b183f
3f3f3f1217393f1a4dfdc43f012f2f2fc45f5e5d113332111239c4113332
c63332113331301b4021534a1128f940494a382e21170a00162d0b225b4e
44390e333e49334c1c4c054c282b183f3f3f3f1217393f1a4dfdc43f3130
59250e0323222e023713363635342623220e0207030e0323222e02371336
3635342623220e0207030e0323222e0237133e0333321e0207073e033332
1e02173e0333321e02151406070567010a152118181f1106026f0507313d
326b604a1150020a152118181f1006016f0705323c336a604a1150020a14
2118191f110502b50109131d14151b0f0401220f455c6d393c56371a0314
465c6c38435a3818080719080b080404080b08022c1d341a404c3d6b9356
fe6e080b080404080b08022c1e3a193d493d6b9356fe6e080b080404080b
080385070c080303080c07ac224c402a21394f2f234c3f2a264258342344
2400>QJJAAA+Calibri AddT42Char 
1 6470 1005 <0001005f000003530517002e008dba027d027e00582bb10102435558b900
30ffc040180f024d0030010f032a142b1320141314001a0b2a25081514b8
014ab325522b13b80100b3400854282b183f1a4dfdc43ffdcd111239012f
c4cd393911331133113331305f5e5d2b1b400a0030010f032a25081514b8
014ab325522b13b80100b3400854282b183f1a4dfdc43ffdcd1112393130
015f5e5d5925140e042321222635343e04332113050606262635343e0237
253e0333321e02070333321603530305080c0f09fd5b0c0f0305090c100a
010ec3fee710140d05050b120e0151050d121911191f110301e2ea0e0b66
06151716130b141105131618120d03ce94080506100c0b21211e08bf0304
040104070b06fb8f1300>QJJAAA+Calibri AddT42Char 
1 336 47 <00010052fffa01fa051400150045ba027d027e00582bb10102435558400f
15000b0a150b000a040510520555282b183f3f121739012fc6333231301b
400b150b000a040510520555282b183f3f121739313059250e0323222e02
37133e0333321e02070100010b1622181a20120602f8010d162118182013
060219070c070505070c0704dc070c070505070c0700>QJJAAA+Calibri AddT42Char 
1 788 282 <00020051ffed0439056d002c003f0087ba027f028000582bb10102435558
400a212d3f222c003f092237b8021e401a15222c032746212d3f09080006
0e30f91c4a3af8400e4d034c282b183f3f1a4ded3fed1217393f12393901
2fedc4392f33327d870ec4c431301b4019222c032746212d3f090800060e
30f91c4a3af8400e4d034c282b183f3f1a4ded3fed1217393f1239393130
5925060623222e0237370e0323222e0435343e0433321e0217133e033332
1e020701262623220e0415141633323e0237032d03242a151a100502200d
445d723b3b573b25150716304b6a8b582b4c3e341566010a142019181f12
0502fed62f6d443555443120104249376f604a1219110e04070b09a8214b
3f291f3445494a1f3a90918b6b4213212e1901fe070d070505070d07fd62
454831526a716e2e61673c6a9257>QJJAAA+Calibri AddT42Char 
1 2354 367 <0001003ffffa01f1057100150047ba027f028000582bb101024355584010
15000b400a000a150b04051046054c282b183f3f121739012f1acd333231
301b400b000a150b04051046054c282b183f3f121739313059370e032322
2e0237013e0333321e0207e6020a142118191f110502010a020915211918
1f11040119080b080404080b080538080c080404080c0800>QJJAAA+Calibri AddT42Char 

1 0 3 <> QJJAAA+Calibri AddT42Char 
1 3214 381 <0002004effed03d103ca0017002f0058ba027f028000582bb10102435558
b90000021f4009001810180213031824b8021e400b0c1df5134a29e34007
4d282b183f1a4ded3fed012fedd45f5e5ded31301b400a1df5134a29e340
074d282b183f1a4ded3fed31305901140e0423222e0235343e0433321e02
07342e0223220e0415141e0233323e0403d11c395877975d6089582a1b3a
5777975d6089592aae15314f383c624d39251216314e383d614d39251202
734a9a8f7e5e372e5880514a9a8e7f5e372f58805a3250371e2b49626f75
383250381e2b4a627074>QJJAAA+Calibri AddT42Char 
1 478 258 <00020051ffed03e103ca0026003b008dba027f028000582bb10102435558
b3091d081eb801afb42627263b08b801aeb7000f260113032631b8021e40
171300093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4d
ed3fed3f121739012fedd45f5e5ddded33113310ed11393931301b401600
093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4ded3fed
3f12173931305925060623222e0237370e0323222e0235343e0433321617
37363633321e020707262623220e0415141e0233323e0237032c04242a14
1a100603210d445d723b50693e17152f4b6a8c59597f3213042628141b10
0401d32f6d44365743311f0f0b1f362b376f604a1219110e04070b09aa20
4c402a385c743d388e948c6f43483f5b100e03080c07ec454533546b726e
2c234539233d6c925800>QJJAAA+Calibri AddT42Char 
1 6138 894 <00010075fea702b0058b0025002db900140186b20a051cbb01cd00000017
01fab405210f8528ba027f028000582b2b3f2f012fedd6ed10deed313001
060a0215141e0217160e0223222e0227260235341a02373e033332161614
02a96d985f2c070d150e03010e1e191119110902252d29609e75040d1520
17171c0f0562a5febbfecafedd8235757775330c110b0502060805730103
96810116012a013fa8070a0703060a10>QJJAAA+Calibri AddT42Char 
1 5940 856 <0001004afff7012a00e00017001fbc00000272000c00130155b2074c28ba
027f028000582b2b3fed012fed313025140e0423222e0235343e0433321e
02012a050a0f182c221c241408050b0f1729261d231407990e262822180c
08131b1110272621170d0a131a00>QJJAAA+Calibri AddT42Char 
1 4100 396 <0001003ffffa02f203ca0033006cba027f028000582bb10102435558400a
2811111d121c001d1c0cb801184010402d4a121c11281d2706172249174c
282b183f3f1217393f1a4ded012f2fc411331133113331301bb9000c0118
4010402d4a121c11281d2706172249174c282b183f3f1217393f1a4ded31
305901140e0423222e0223220e0207030e0323222e0237133e0333321e02
07073e0333321e02171602f20304080c0d080813171e1422595647114f02
0a142118191f110502b3010a141d14151b0f040121173f4a512711231e17
0606039c04171e201b12070a073b688e53fe6f080b080404080b08038507
0c080303080c07a4294c3922050709060600>QJJAAA+Calibri AddT42Char 
1 4358 400 <00010009ffed02eb03ca004600adba027f028000582bb10102435558bc00
0f01fd003b0034020e402b163b163b1600230f34401b45cf282005300540
0503050acf404a20f928002a102a020c032a2fde401b4d282b183f1a4dfd
d4005f5e5d2bed3ffdd4005d2bed11123939012fc439392f2f10ed10ed31
301b40240f34401b45cf2820053005400503050acf404a20f928002a102a
020c032a2fde401b4d282b183f1a4dfdd4005f5e5d2bed3ffdd4005d2bed
1112393931305901140e0223222e0223220e0215141e0415140e0223222e
0227262635343e0433321e0233323e0235342e0435343e0233321e021716
02eb060b0f090c2130432e2c442e1835505d4f353767925a2f5343300d08
070206070a0a070c2237523d374f3419344f5c4f35345f855126473c2c0b
0b036c0a212016131814192b371e28352a293b533f467957310e161b0c08
110c08161816120b1b1f1b1b2d3c212a352b2a3953404271532e0c12160b
0a00>QJJAAA+Calibri AddT42Char 
1 3434 393 <0002fff8fe9403d003ca002a003f0092ba027f028000582bb10102435558
400d2135360c0d350d35180d171800b8021e401c2b170c363521040730f9
264a170d182004121b49124f39f840074d282b183f1a4ded3f3f1217393f
ed121739012fd4ed2f11331133107d870ec4c411013331301b401a0c3635
21040730f9264a170d182004121b49124f39f840074d282b183f1a4ded3f
3f1217393fed12173931305901140e0423222e0227030e0323222e023713
363633321e0207073e0333321e0207342e0223220e020707161633323e04
03d016304b6a8b582d4a3e3416550209142119171f120501fd02242a151a
100401220e435d723b4c67401cad0f2135273670604b11212f6c44355743
31210f02843a91948b6c4112202b1afe50080c080404080c0804ea100e03
070c08ab214b412a3457774f2b48341c3c6c9357a5464532546a7270>QJJAAA+Calibri AddT42Char 
1 6304 895 <0001ffdbfea70216058b0025002db900140186b20a051cbb01ce00000017
01fbb40521850f28ba027f028000582b2b2f3f012fedd6ed10deed313003
361a0235342e0227263e0233321e0217161215140a02070e032322262634
1f6d985f2c070d150e03020d1e191219110802252e29619d75050d152017
171c0efed0a40145013801228235757774340b110c050305080672fefd97
81feebfed6fec1a9060a0703060a0f00>QJJAAA+Calibri AddT42Char 
1 6750 1006 <00010020000003ca0521004300a6ba027d027e00582bb10102435558b900
45ffc040090f024d0045010f0340b80230b71212270027000d1ab80264b2
380d2ebb01300024001f012c40091a133f030833531240b80126b3400854
282b183f1a4dfdc13f121739fdd4ed012fd4ed1239392f2f3910ed31305f
5e5d2b1bb50045010f032ebb01300024001f012c40091a133f0308335312
40b80126b3400854282b183f1a4dfdc13f121739fdd4ed3130015f5e5d59
25140e042321222e0235343e0237013e0535342e0223220e022322263534
3e04373e0333321e0215140e04070721321603520306090d100afd350d12
0a05030c1815014d4e714d2e1a080f254434396854390b0a0c030307090b
070b415c703c607e491d0c233f658f63fa0228110e6906161718120c060b
0f0a0a20262712012444776757483b171837302022292314130813161614
13070b2422193652602b29565f6a7b8f54d61900>QJJAAA+Calibri AddT42Char 
1 7100 1007 <00010023ffed03c30521005a00d9ba027d027e00582bb10102435558b900
5cffc040090f024d005c010f0320b80257400d0055290041290000294103
0f36b80254b2500f0cbb0136001600460126b63e163e163e1b39b8010440
0a4b5531ec2525074b531bb80104b3400756282b183f1a4ded3f12392fed
3910ed1139392f2f10ed10ed012fd4ed1217392f2f2f11123910ed31305f
5e5d2b1bb5005c010f030cbb0136001600460126b63e163e163e1b39b801
04400a4b5531ec2525074b531bb80104b3400756282b183f1a4ded3f1239
2fed3910ed1139392f2f10ed10ed3130015f5e5d5901140e0423222e0227
262635343e0433321e0233323e0235342e022323222635343e043333323e
0235342623220e0223222635343e02373e0333321e0215140e0207151e03
038019365375965f32594f411a0f0d020406090d08092f4c6743547b5027
1d3f65478b10110306090d100b714a7c5932515e3968543b0c090a04090f
0a0b405c733d4f774e272d537244425d3a1a019d316660553f250c151d11
0919100615181b150d1f251f345163312846331e111307161516120a2d4f
683b4752232924110f081e22200a0b2523192545633d467b60450f020731
4757>QJJAAA+Calibri AddT42Char 
1 2920 374 <0001003ffffa03b003ca003a007bba027f028000582bb101024355584026
311a1a1b26040e03000f0114030f0e2515f940364a251b0e041a0f312608
202b49204c094c282b183f3f3f1217393f1a4ded012fc4c45f5e5d321133
c63332113331301b401615f940364a251b0e041a0f312608202b49204c09
4c282b183f3f3f1217393f1a4ded31305901140607030e0323222e023713
363635342623220e0207030e0323222e0237133e0333321e0207073e0333
321e0203b00807710209152019181f1105016f0705343d356f5f4b115002
0a142118191f110502b50109131d14151b0f0401220f445e713d435a3818
02d6234424fdce080b080404080b08022c1f3a163d4b3d6b9356fe6e080b
080404080b080385070c080303080c07ac224c402a294358>QJJAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303da050e00030007003b00550056004fb52d162d16083c41
0a01ed00490007016400020020018c000800010164401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103dafc5b03
4ffd06027b1f456e4e24021f1b0e140c050120051f17083d4f2e130f2135
2828402f1f070a060205080608293a4422445e3a1afeb503070b070a2016
161a0e0504070c0809201913190e04fe46050efaf2050efb43046cfb9403
313467523605980a0802040606bc1b17253b4621192b20130f13100c0e05
131612060713120b263d4afd8b08171a17070a0a070c100a091818160809
0a060c10fd38>QJJAAA+Calibri AddT42Char 
QJJAAA+Calibri /CharStrings get begin
/g395 395 def
/g437 437 def
/g286 286 def
/g890 890 def
/g410 410 def
/g349 349 def
/g373 373 def
/g1005 1005 def
/g47 47 def
/g282 282 def
/g367 367 def
/g3 3 def
/g381 381 def
/g258 258 def
/g894 894 def
/g856 856 def
/g396 396 def
/g400 400 def
/g393 393 def
/g895 895 def
/g1006 1006 def
/g1007 1007 def
/g374 374 def
end
QJJAAA+Calibri /Encoding get
dup 1 /g395 put
dup 2 /g437 put
dup 3 /g286 put
dup 4 /g890 put
dup 5 /g410 put
dup 6 /g349 put
dup 7 /g373 put
dup 8 /g1005 put
dup 9 /g47 put
dup 10 /g282 put
dup 11 /g367 put
dup 12 /g3 put
dup 13 /g381 put
dup 14 /g258 put
dup 15 /g894 put
dup 16 /g856 put
dup 17 /g396 put
dup 18 /g400 put
dup 19 /g393 put
dup 20 /g895 put
dup 21 /g1006 put
dup 22 /g1007 put
dup 23 /g374 put
pop
end
%ADOEndSubsetFont
/BZUQPO+Calibri /QJJAAA+Calibri findfont ct_VMDictPut
/BZUQPO+Calibri*1 
[/.notdef /g395 /g437 /g286 /g890 /g410 /g349 /g373 
/g1005 /g47 /g282 /g367 /g3 /g381 /g258 /g894 
/g856 /g396 /g400 /g393 /g895 /g1006 /g1007 /g374 
232{/.notdef}rp]
BZUQPO+Calibri nf
BZUQPO+Calibri*1 [0 -20.04 -20.04 0 0 0 ]msf
241.44 169.649 mo
(\001\002\003\002\003\004\005\006\007\003\004\010)
[-10.317 -10.3169 -9.60913 -10.317 -9.59935 -9.96887 -6.72095 -4.55016 -15.8397 -9.59937 -9.96886 0 
]ysh
64.8 351.089 mo
(\011\012\013\003\014\005\006\007\003)
[-5.04092 -10.3169 -4.55023 -9.60916 -4.19849 -6.72092 -4.5502 -15.8397 0 ]ysh
67.08 204.809 mo
(\011\012\013\003\014\005\006\007\003)
[-5.04089 -10.3169 -4.55023 -9.60919 -4.19843 -6.72095 -4.55023 -15.8396 0 ]ysh
199.8 479.009 mo
(\005\015\005\016\013\004\005\006\007\003\014\017\006\020\003\020\014\021\003\022\023\020\014\005\006\007\003\024)
[-6.48093 -10.3163 -6.48093 -10.317 -4.54041 -9.96887 -6.72092 -4.55023 -15.8397 -9.60916 -4.43848 -6.11542 
-4.5502 -5.03113 -9.60919 -5.03113 -4.31845 -6.8446 -9.60916 -7.78714 -10.3267 -5.03116 -4.31845 -6.72092 
-4.5502 -15.8397 -9.59943 0 ]ysh
241.44 310.289 mo
(\001\002\003\002\003\004\005\006\007\003\004\025)
[-10.317 -10.3169 -9.60919 -10.3169 -9.59937 -9.96887 -6.72089 -4.55023 -15.8396 -9.59943 -9.96887 0 
]ysh
241.44 490.289 mo
(\001\002\003\002\003\004\005\006\007\003\004\026)
[-10.3169 -10.3169 -9.60919 -10.3169 -9.5994 -9.96887 -6.72092 -4.5502 -15.8397 -9.5994 -9.96887 0 
]ysh
241.44 692.729 mo
(\001\002\003\002\003\004\005\006\007\003\004\027)
[-10.317 -10.317 -9.60913 -10.317 -9.59943 -9.96881 -6.72095 -4.55017 -15.8397 -9.59937 -9.96887 0 
]ysh
gsave
27.48 718.049 mo
27.48 -1.95032 li
297.48 -1.95032 li
297.48 718.049 li
cp
eclp
278.28 632.13 mo
379.2 380.01 li
380.16 380.37 li
279.24 632.61 li
cp
373.92 384.09 mo
380.04 379.29 li
381.24 386.97 li
381.24 387.21 381 387.45 380.76 387.57 cv
380.52 387.57 380.28 387.33 380.16 387.09 cv
379.2 380.25 li
379.92 380.61 li
374.52 384.81 li
374.28 385.05 373.92 384.93 373.8 384.69 cv
373.68 384.57 373.68 384.21 373.92 384.09 cv
.750179 .679652 .670191 .901488 cmyk
f
284.04 429.45 mo
356.4 368.25 li
357.12 368.97 li
284.76 430.29 li
cp
349.8 369.33 mo
357.48 368.01 li
354.96 375.33 li
354.84 375.57 354.6 375.69 354.24 375.69 cv
354 375.57 353.88 375.33 354 374.97 cv
356.28 368.49 li
356.88 369.09 li
350.04 370.29 li
349.8 370.41 349.44 370.17 349.44 369.93 cv
349.44 369.69 349.56 369.45 349.8 369.33 cv
f
290.4 243.93 mo
357.36 344.37 li
356.52 344.97 li
289.68 244.53 li
cp
357.12 337.65 mo
357.48 345.45 li
350.52 342.09 li
350.28 341.97 350.16 341.61 350.28 341.37 cv
350.4 341.13 350.76 341.01 351 341.13 cv
357.24 344.25 li
356.52 344.73 li
356.04 337.77 li
356.04 337.53 356.28 337.29 356.52 337.29 cv
356.76 337.17 357 337.41 357.12 337.65 cv
f
290.52 120.33 mo
380.64 340.17 li
379.68 340.53 li
289.56 120.69 li
cp
381.6 333.57 mo
380.52 341.25 li
374.4 336.45 li
374.16 336.33 374.04 335.97 374.28 335.85 cv
374.4 335.61 374.76 335.49 375 335.73 cv
380.52 339.93 li
379.68 340.29 li
380.64 333.33 li
380.64 333.09 380.88 332.97 381.24 332.97 cv
381.48 332.97 381.6 333.21 381.6 333.57 cv
f
grestore
gsave
297.48 718.049 mo
297.48 -1.95032 li
567.48 -1.95032 li
567.48 718.049 li
cp
eclp
27.48 718.049 mo
567.48 718.049 li
567.48 -1.95062 li
27.48 -1.95062 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
ef
grestore
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Calibri gcheck setglobal} if
1 1714 1108 <0001ffbdfe9304a4053d0037004ebf003401f50013002c02dd001a001402
fc401330131a300000301a1304240b1a2d141304082cb80157b320084f28
ba0348034900582b2b3f2fed121739012fc417392f2f2f2f10ed10ed10ed
313005140e0423212226353436373e033701012e03353436373636332132
1615140e0423210116161514060701213216039703070b10170efcb72522
0604070f1620180239feae0a0d0904090a09362803220e0c03070b0f150c
fda0016e07090a0dfd8e0286110cb90720282b231723200b281326342925
180229020e0f1714110b0f38332a301714081f26292216fdcf0b170b0d19
0dfda21a>HIBBAA+Calibri AddT42Char 
HIBBAA+Calibri /CharStrings get begin
/g1108 1108 def
end
HIBBAA+Calibri /Encoding get
dup 5 /g1108 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BZUQPN+Calibri*1 
[/.notdef /g1005 /g1006 /g1007 /g374 /g1108 250{/.notdef}rp]
BZUQPN+Calibri nf
BZUQPN+Calibri*1 [0 -32.04 -32.04 0 0 0 ]msf
391.08 366.449 mo
(\005)sh
BZUQPO+Calibri*1 [0 -27.96 -27.96 0 0 0 ]msf
477.24 96.4493 mo
(\005\006\007\003)
[-9.36127 -6.34637 -22.0796 0 ]ysh
gsave
297.48 718.049 mo
297.48 -1.95032 li
567.48 -1.95032 li
567.48 718.049 li
cp
eclp
278.28 632.13 mo
379.2 380.01 li
380.16 380.37 li
279.24 632.61 li
cp
373.92 384.09 mo
380.04 379.29 li
381.24 386.97 li
381.24 387.21 381 387.45 380.76 387.57 cv
380.52 387.57 380.28 387.33 380.16 387.09 cv
379.2 380.25 li
379.92 380.61 li
374.52 384.81 li
374.28 385.05 373.92 384.93 373.8 384.69 cv
373.68 384.57 373.68 384.21 373.92 384.09 cv
.750179 .679652 .670191 .901488 cmyk
f
284.04 429.45 mo
356.4 368.25 li
357.12 368.97 li
284.76 430.29 li
cp
349.8 369.33 mo
357.48 368.01 li
354.96 375.33 li
354.84 375.57 354.6 375.69 354.24 375.69 cv
354 375.57 353.88 375.33 354 374.97 cv
356.28 368.49 li
356.88 369.09 li
350.04 370.29 li
349.8 370.41 349.44 370.17 349.44 369.93 cv
349.44 369.69 349.56 369.45 349.8 369.33 cv
f
290.4 243.93 mo
357.36 344.37 li
356.52 344.97 li
289.68 244.53 li
cp
357.12 337.65 mo
357.48 345.45 li
350.52 342.09 li
350.28 341.97 350.16 341.61 350.28 341.37 cv
350.4 341.13 350.76 341.01 351 341.13 cv
357.24 344.25 li
356.52 344.73 li
356.04 337.77 li
356.04 337.53 356.28 337.29 356.52 337.29 cv
356.76 337.17 357 337.41 357.12 337.65 cv
f
290.52 120.33 mo
380.64 340.17 li
379.68 340.53 li
289.56 120.69 li
cp
381.6 333.57 mo
380.52 341.25 li
374.4 336.45 li
374.16 336.33 374.04 335.97 374.28 335.85 cv
374.4 335.61 374.76 335.49 375 335.73 cv
380.52 339.93 li
379.68 340.29 li
380.64 333.33 li
380.64 333.09 380.88 332.97 381.24 332.97 cv
381.48 332.97 381.6 333.21 381.6 333.57 cv
f
grestore
BZUQPO+Calibri*1 [0 -20.04 -20.04 0 0 0 ]msf
424.8 405.329 mo
(\001\002\003\002\003\004\005\006\007\003)
[-10.317 -10.3169 -9.60919 -10.3169 -9.5994 -9.96887 -6.72089 -4.5502 -15.8397 0 ]ysh
447 676.409 mo
447 92.3696 li
448.08 92.3696 li
448.08 676.409 li
cp
451.44 670.649 mo
447.48 677.369 li
443.64 670.649 li
443.52 670.409 443.52 670.049 443.76 669.929 cv
444 669.809 444.36 669.929 444.48 670.169 cv
447.96 676.169 li
447.12 676.169 li
450.6 670.169 li
450.72 669.929 451.08 669.809 451.32 669.929 cv
451.56 670.049 451.56 670.409 451.44 670.649 cv
.750179 .679652 .670191 .901488 cmyk
f
363.24 610.89 mo
385.8 610.89 li
385.8 608.85 li
363.24 608.85 li
cp
f
363.24 610.89 mo
385.8 610.89 li
385.8 608.85 li
363.24 608.85 li
cp
f
362.16 666.089 mo
362.28 609.81 li
364.32 609.93 li
364.2 666.089 li
f
362.16 666.089 mo
362.28 609.81 li
364.32 609.93 li
364.2 666.089 li
f
384.72 666.089 mo
384.84 609.81 li
386.76 609.93 li
386.64 666.089 li
f
384.72 666.089 mo
384.84 609.81 li
386.76 609.93 li
386.64 666.089 li
f
363.12 667.169 mo
385.68 667.169 li
385.68 665.129 li
363.12 665.129 li
cp
f
363.12 667.169 mo
385.68 667.169 li
385.68 665.129 li
363.12 665.129 li
cp
f
362.64 625.53 mo
366.84 622.41 li
367.92 623.85 li
363.72 626.97 li
cp
368.28 621.45 mo
372.6 618.33 li
373.56 619.77 li
369.36 622.89 li
cp
373.92 617.25 mo
378.24 614.25 li
379.2 615.57 li
375 618.69 li
cp
379.68 613.17 mo
383.88 610.05 li
384.96 611.49 li
380.64 614.61 li
f
362.64 634.89 mo
366.84 631.77 li
367.92 633.21 li
363.72 636.33 li
cp
368.28 630.81 mo
372.6 627.69 li
373.56 629.13 li
369.36 632.25 li
cp
373.92 626.73 mo
378.24 623.61 li
379.2 625.05 li
375 628.05 li
cp
379.68 622.53 mo
383.88 619.41 li
384.96 620.85 li
380.64 623.97 li
f
362.64 644.25 mo
366.84 641.25 li
367.92 642.57 li
363.72 645.69 li
cp
368.28 640.17 mo
372.6 637.05 li
373.56 638.49 li
369.36 641.61 li
cp
373.92 636.09 mo
378.24 632.97 li
379.2 634.41 li
375 637.41 li
cp
379.68 631.89 mo
383.88 628.89 li
384.96 630.21 li
380.64 633.33 li
f
362.64 653.61 mo
366.84 650.61 li
367.92 651.93 li
363.72 655.05 li
cp
368.28 649.53 mo
372.6 646.41 li
373.56 647.85 li
369.36 650.97 li
cp
373.92 645.45 mo
378.24 642.33 li
379.2 643.77 li
375 646.89 li
cp
379.68 641.25 mo
383.88 638.25 li
384.96 639.57 li
380.64 642.69 li
f
362.64 663.089 mo
366.84 659.969 li
367.92 661.409 li
363.72 664.409 li
cp
368.28 658.89 mo
372.6 655.77 li
373.56 657.21 li
369.36 660.329 li
cp
373.92 654.81 mo
378.24 651.69 li
379.2 653.13 li
375 656.25 li
cp
379.68 650.73 mo
383.88 647.61 li
384.96 649.05 li
380.64 652.05 li
f
373.8 665.489 mo
377.88 662.129 li
378.96 663.449 li
375 666.809 li
cp
379.2 660.929 mo
383.28 657.57 li
384.36 658.89 li
380.4 662.249 li
cp
384.6 656.49 mo
385.08 656.13 li
386.28 657.45 li
385.68 657.81 li
f
362.64 616.17 mo
367.2 613.41 li
368.04 614.85 li
363.6 617.61 li
cp
368.64 612.45 mo
373.08 609.69 li
374.04 611.13 li
369.6 613.89 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+Calibri gcheck setglobal} if
1 1806 346 <0001003ffffa03b005710041007dba027f028000582bb101024355584023
2e1924410b000a230b180b4134040513f940394a23190a00242e061e2946
1e4c054c282b183f3f3f1217393f1a4ded121739012f2fc4321133cd3332
31301b401a180b4134040513f940394a23190a00242e061e29461e4c054c
282b183f3f3f1217393f1a4ded121739313059250e0323222e0237133636
35342e0223220e0207030e0323222e0237013e0333321e0207030e03073e
0333321e02151406070331020a152019181f1105016f05070c1b2b1f356f
5f4b1150020a142118191f110502010a0209152119181f11040150050e0f
0f0610445c6f3b405a391a080719080b080404080b08022c1a41181d3023
143e6d9455fe71080b080404080b080538080c080404080c08fe691a3635
3012234b3f2a25415a3424442300>QJJAAA+Calibri AddT42Char 
1 1404 336 <00020042fe9303e103ca003c005100b4ba027f028000582bb10102435558
400d33343c3c3d51501d1c3d1c3d47b8021e40260b29001c343c001c0405
37491f513d33042440f9304a2809f51212174cf8244d17e140054f282b18
3f1a4ded3fed12392f00ed2b3fed1217393f121739012f332fc4edc4107d
870ec4c4c411013312393931301b4022343c001c040537491f513d330424
40f9304a2809f51212174cf8244d17e140054f282b183f1a4ded3fed1239
2f00ed2b3fed1217393f121739313059050e0323222627262635343e0433
321e0233323e02373636370e0323222e0235343e04333216173736363332
1e020707262623220e0415141e0233323e0237031d10476e97605389290f
0b0105070b10090c243c5941365741290a11220b10465c6e394b683f1c16
304b6a8b58597f3213042628141b100401d32f6d44365643321f0f0f2135
26376f604a122e50784f2821170a130f06161618130b151a16162c442f5b
7821254b3f27325777453a91938b6d42483f5b100e03080c07ec45453253
6c716f2d2b48331e3d6c9357>QJJAAA+Calibri AddT42Char 
1 5688 455 <00010015fe9403a303bc00300068ba027f028000582bb10102435558b323
141329bb02100000002201fdb318180009b80223400e40132e492308141d
49144b0e4f282b183f3f3f1239393f012f1a4dedc4392fed10ed11393931
301b400c2e492308141d49144b0e4f282b183f3f3f1239393f3130590114
06070e0307010e032322262636371303262635343e0233321e021713333e
03373e0333321603a30405214e688b60fefd06121a25191b2312020bf495
0202071421181b1f11070175023e6454471f020b15241b2d1e03a40b170a
5bc5d7ea81fe9f080c0904050c140e0139036f0c14070b0f090303070e0a
fd2257b4b9bd61080b08030c>QJJAAA+Calibri AddT42Char 
QJJAAA+Calibri /CharStrings get begin
/g346 346 def
/g336 336 def
/g455 455 def
end
QJJAAA+Calibri /Encoding get
dup 24 /g346 put
dup 25 /g336 put
dup 26 /g455 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BZUQPO+Calibri*1 
[/.notdef /g395 /g437 /g286 /g890 /g410 /g349 /g373 
/g1005 /g47 /g282 /g367 /g3 /g381 /g258 /g894 
/g856 /g396 /g400 /g393 /g895 /g1006 /g1007 /g374 
/g346 /g336 /g455 229{/.notdef}rp]
BZUQPO+Calibri nf
BZUQPO+Calibri*1 [0 -20.04 -20.04 0 0 0 ]msf
379.8 597.089 mo
(\030\006\031\030\014\023\021\006\015\021\006\005\032)
[-10.317 -4.55017 -10.317 -10.317 -4.18866 -10.3267 -6.8446 -4.55023 -10.3163 -6.8446 -4.55023 -6.72089 
0 ]ysh
402.72 610.89 mo
425.16 610.89 li
425.16 608.85 li
402.72 608.85 li
cp
.750179 .679652 .670191 .901488 cmyk
f
402.72 610.89 mo
425.16 610.89 li
425.16 608.85 li
402.72 608.85 li
cp
f
401.52 666.089 mo
401.64 609.81 li
403.68 609.93 li
403.56 666.089 li
f
401.52 666.089 mo
401.64 609.81 li
403.68 609.93 li
403.56 666.089 li
f
424.08 666.089 mo
424.2 609.81 li
426.12 609.93 li
426 666.089 li
f
424.08 666.089 mo
424.2 609.81 li
426.12 609.93 li
426 666.089 li
f
402.48 667.169 mo
425.04 667.169 li
425.04 665.129 li
402.48 665.129 li
cp
f
402.48 667.169 mo
425.04 667.169 li
425.04 665.129 li
402.48 665.129 li
cp
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+Calibri gcheck setglobal} if
1 5338 449 <0001008ffffa05c203bc004b0084ba027f028000582bb10102435558b900
2d01aab41e22131230bb01fc003a003b0185b4123a122242bb020f000000
2c01fd40124022474935492e3c1303192749194c0d4c282b183f3f3f1217
393f3f012f1a4dedd4ed12393910ed10ed113910dded31301b4010474935
492e3c1303192749194c0d4c282b183f3f3f1217393f3f31305901140607
0e03070e0323222e023503010e0323222e023503262635343e0233321e02
17131537013e0333321e02171315373e03373e0333321e0205c20503265b
6d7e4807151b22151a23150943fed105101a271c1c28190c5f0101081321
1a1a1f11060146040155040a121e17171f1208014a052e5c564d20020c15
221a181f100503a50b17086ddfddd5630b0c070204080e0a0294fd6f0b0f
090404080e0a03570911060c0f090303070d09fd18090902e8080d080303
070c08fd1b080848afc1ca61090d070303050900>QJJAAA+Calibri AddT42Char 
QJJAAA+Calibri /CharStrings get begin
/g449 449 def
end
QJJAAA+Calibri /Encoding get
dup 27 /g449 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BZUQPO+Calibri*1 
[/.notdef /g395 /g437 /g286 /g890 /g410 /g349 /g373 
/g1005 /g47 /g282 /g367 /g3 /g381 /g258 /g894 
/g856 /g396 /g400 /g393 /g895 /g1006 /g1007 /g374 
/g346 /g336 /g455 /g449 228{/.notdef}rp]
BZUQPO+Calibri nf
BZUQPO+Calibri*1 [0 -20.04 -20.04 0 0 0 ]msf
419.16 593.609 mo
(\013\015\033\014\023\021\006\015\021\006\005\032)
[-4.55023 -10.1964 -14.283 -4.30872 -10.3267 -6.8446 -4.55017 -10.3163 -6.8446 -4.55017 -6.72092 0 
]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BZUQPO+Calibri*1 uf
/BZUQPO+Calibri uf
/QJJAAA+Calibri uf
/BZUQPN+Calibri*1 uf
/BZUQPN+Calibri uf
/HIBBAA+Calibri uf
/BZUQPM+Calibri*1 uf
/BZUQPM+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
